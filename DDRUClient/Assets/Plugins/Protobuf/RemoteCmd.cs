// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RemoteCmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DDRCommProto {

  /// <summary>Holder for reflection information generated from RemoteCmd.proto</summary>
  public static partial class RemoteCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for RemoteCmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RemoteCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9SZW1vdGVDbWQucHJvdG8SDEREUkNvbW1Qcm90bxoNQmFzZUNtZC5wcm90",
            "byIlChNyZXFSZW1vdGVTZXJ2ZXJMaXN0Eg4KBmZyb21pcBgBIAEoCSKOAQoT",
            "cnNwUmVtb3RlU2VydmVyTGlzdBI/CgdzZXJ2ZXJzGAEgAygLMi4uRERSQ29t",
            "bVByb3RvLnJzcFJlbW90ZVNlcnZlckxpc3QuUmVtb3RlU2VydmVyGjYKDFJl",
            "bW90ZVNlcnZlchIMCgRuYW1lGAEgASgJEgoKAmlwGAIgASgJEgwKBHBvcnQY",
            "AyABKAUiKgoMcmVxUmVnaXN0ZUxTEgwKBHVkaWQYASABKAkSDAoEbmFtZRgC",
            "IAEoCSIdCgxyc3BSZWdpc3RlTFMSDQoFZXJyb3IYASABKAkiWQoOcmVxUmVt",
            "b3RlTG9naW4SJAoEdHlwZRgBIAEoDjIWLkREUkNvbW1Qcm90by5lQ2x0VHlw",
            "ZRIQCgh1c2VybmFtZRgCIAEoCRIPCgd1c2VycHdkGAMgASgJIsMCCg5yc3BS",
            "ZW1vdGVMb2dpbhI1CgZsc2xpc3QYASADKAsyJS5ERFJDb21tUHJvdG8ucnNw",
            "UmVtb3RlTG9naW4uTFNFbnRpdHkSQQoHcmV0Y29kZRgCIAEoDjIwLkREUkNv",
            "bW1Qcm90by5yc3BSZW1vdGVMb2dpbi5lUmVtb3RlTG9naW5SZXRDb2RlEigK",
            "CHlvdXJSb2xlGAMgASgOMhYuRERSQ29tbVByb3RvLmVDbHRUeXBlGiYKCExT",
            "RW50aXR5EgwKBHVkaWQYASABKAkSDAoEbmFtZRgCIAEoCSJlChNlUmVtb3Rl",
            "TG9naW5SZXRDb2RlEgsKB3N1Y2Nlc3MQABIPCgtzZXJ2ZXJfYnVzeRABEhgK",
            "FHNlcnZlcl9saW1pdF9yZWFjaGVkEAISFgoSaW5jb3JyZWN0X3Bhc3N3b3Jk",
            "EAMiGwoLcmVxU2VsZWN0TFMSDAoEdWRpZBgBIAEoCSIqCgtyc3BTZWxlY3RM",
            "UxIMCgR1ZGlkGAEgASgJEg0KBWVycm9yGAIgASgJIh0KDXJlcVVuc2VsZWN0",
            "TFMSDAoEdWRpZBgBIAEoCSIsCg1yc3BVbnNlbGVjdExTEgwKBHVkaWQYASAB",
            "KAkSDQoFZXJyb3IYAiABKAki1wEKE1JlbW90ZVN0cmVhbUNoYW5uZWwSCwoD",
            "dXJsGAEgASgJEhcKD3VwbG9hZGJhbmR3aWR0aBgCIAEoBRIZChFkb3dubG9h",
            "ZGJhbmR3aWR0aBgDIAEoBRIPCgdzcmNuYW1lGAQgASgMEjoKBHR5cGUYBSAB",
            "KA4yLC5ERFJDb21tUHJvdG8uUmVtb3RlU3RyZWFtQ2hhbm5lbC5TdHJlYW1U",
            "eXBlIjIKClN0cmVhbVR5cGUSCQoFVmlkZW8QABIJCgVBdWRpbxABEg4KClZp",
            "ZGVvQXVkaW8QAiJOChdyZXFSdHNwU3RyZWFtVXBsb2FkQWRkchIzCghjaGFu",
            "bmVscxgBIAMoCzIhLkREUkNvbW1Qcm90by5SZW1vdGVTdHJlYW1DaGFubmVs",
            "Il0KF3JzcFJ0c3BTdHJlYW1VcGxvYWRBZGRyEjMKCGNoYW5uZWxzGAEgAygL",
            "MiEuRERSQ29tbVByb3RvLlJlbW90ZVN0cmVhbUNoYW5uZWwSDQoFZXJyb3IY",
            "AiABKAkihQEKFHJlcVJlbW90ZUZpbGVBZGRyZXNzEi4KDnRhclNlcnZpY2VU",
            "eXBlGAEgASgOMhYuRERSQ29tbVByb3RvLmVDbHRUeXBlEioKCGZpbGVUeXBl",
            "GAIgASgOMhguRERSQ29tbVByb3RvLmVGaWxlVHlwZXMSEQoJZmlsZU5hbWVz",
            "GAMgAygMIpcBChRyc3BSZW1vdGVGaWxlQWRkcmVzcxIuCg50YXJTZXJ2aWNl",
            "VHlwZRgBIAEoDjIWLkREUkNvbW1Qcm90by5lQ2x0VHlwZRIqCghmaWxlVHlw",
            "ZRgCIAEoDjIYLkREUkNvbW1Qcm90by5lRmlsZVR5cGVzEhQKDGZpbGVBZGRy",
            "TGlzdBgDIAMoDBINCgVlcnJvchgEIAEoCSJ5ChBub3RpZnlVcGxvYWRGaWxl",
            "EhAKCGh0dHBBZGRyGAEgASgJEg8KB2ZpbGVmbXQYAiADKAwSEgoKZXhpc3Rm",
            "aWxlcxgDIAMoDBIuCg50YXJTZXJ2aWNlVHlwZRgEIAEoDjIWLkREUkNvbW1Q",
            "cm90by5lQ2x0VHlwZSJDChhub3RpZnlVcGxvYWRGaWxlUHJvZ3Jlc3MSEAoI",
            "cHJvZ3Jlc3MYASABKAISFQoNdXBsb2FkZWRmaWxlcxgCIAMoDCKQAQoNY2hr",
            "RmlsZVN0YXR1cxIqCghmaWxlVHlwZRgBIAEoDjIYLkREUkNvbW1Qcm90by5l",
            "RmlsZVR5cGVzEg8KB2ZpbGVmbXQYAiADKAwSEgoKZXhpc3RmaWxlcxgDIAMo",
            "DBIuCg50YXJTZXJ2aWNlVHlwZRgEIAEoDjIWLkREUkNvbW1Qcm90by5lQ2x0",
            "VHlwZSJRCg1hbnNGaWxlU3RhdHVzEioKCGZpbGVUeXBlGAEgASgOMhguRERS",
            "Q29tbVByb3RvLmVGaWxlVHlwZXMSFAoMZmlsZUFkZHJMaXN0GAIgAygMYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DDRCommProto.BaseCmdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRemoteServerList), global::DDRCommProto.reqRemoteServerList.Parser, new[]{ "Fromip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteServerList), global::DDRCommProto.rspRemoteServerList.Parser, new[]{ "Servers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteServerList.Types.RemoteServer), global::DDRCommProto.rspRemoteServerList.Types.RemoteServer.Parser, new[]{ "Name", "Ip", "Port" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRegisteLS), global::DDRCommProto.reqRegisteLS.Parser, new[]{ "Udid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRegisteLS), global::DDRCommProto.rspRegisteLS.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRemoteLogin), global::DDRCommProto.reqRemoteLogin.Parser, new[]{ "Type", "Username", "Userpwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteLogin), global::DDRCommProto.rspRemoteLogin.Parser, new[]{ "Lslist", "Retcode", "YourRole" }, null, new[]{ typeof(global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteLogin.Types.LSEntity), global::DDRCommProto.rspRemoteLogin.Types.LSEntity.Parser, new[]{ "Udid", "Name" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqSelectLS), global::DDRCommProto.reqSelectLS.Parser, new[]{ "Udid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspSelectLS), global::DDRCommProto.rspSelectLS.Parser, new[]{ "Udid", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqUnselectLS), global::DDRCommProto.reqUnselectLS.Parser, new[]{ "Udid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspUnselectLS), global::DDRCommProto.rspUnselectLS.Parser, new[]{ "Udid", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.RemoteStreamChannel), global::DDRCommProto.RemoteStreamChannel.Parser, new[]{ "Url", "Uploadbandwidth", "Downloadbandwidth", "Srcname", "Type" }, null, new[]{ typeof(global::DDRCommProto.RemoteStreamChannel.Types.StreamType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRtspStreamUploadAddr), global::DDRCommProto.reqRtspStreamUploadAddr.Parser, new[]{ "Channels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRtspStreamUploadAddr), global::DDRCommProto.rspRtspStreamUploadAddr.Parser, new[]{ "Channels", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRemoteFileAddress), global::DDRCommProto.reqRemoteFileAddress.Parser, new[]{ "TarServiceType", "FileType", "FileNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteFileAddress), global::DDRCommProto.rspRemoteFileAddress.Parser, new[]{ "TarServiceType", "FileType", "FileAddrList", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyUploadFile), global::DDRCommProto.notifyUploadFile.Parser, new[]{ "HttpAddr", "Filefmt", "Existfiles", "TarServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyUploadFileProgress), global::DDRCommProto.notifyUploadFileProgress.Parser, new[]{ "Progress", "Uploadedfiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.chkFileStatus), global::DDRCommProto.chkFileStatus.Parser, new[]{ "FileType", "Filefmt", "Existfiles", "TarServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.ansFileStatus), global::DDRCommProto.ansFileStatus.Parser, new[]{ "FileType", "FileAddrList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///request get remote serverlist , from client or local server to broadcast server
  /// </summary>
  public sealed partial class reqRemoteServerList : pb::IMessage<reqRemoteServerList> {
    private static readonly pb::MessageParser<reqRemoteServerList> _parser = new pb::MessageParser<reqRemoteServerList>(() => new reqRemoteServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRemoteServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteServerList(reqRemoteServerList other) : this() {
      fromip_ = other.fromip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteServerList Clone() {
      return new reqRemoteServerList(this);
    }

    /// <summary>Field number for the "fromip" field.</summary>
    public const int FromipFieldNumber = 1;
    private string fromip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fromip {
      get { return fromip_; }
      set {
        fromip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRemoteServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRemoteServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fromip != other.Fromip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fromip.Length != 0) hash ^= Fromip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fromip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fromip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fromip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fromip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRemoteServerList other) {
      if (other == null) {
        return;
      }
      if (other.Fromip.Length != 0) {
        Fromip = other.Fromip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fromip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRemoteServerList : pb::IMessage<rspRemoteServerList> {
    private static readonly pb::MessageParser<rspRemoteServerList> _parser = new pb::MessageParser<rspRemoteServerList>(() => new rspRemoteServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRemoteServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteServerList(rspRemoteServerList other) : this() {
      servers_ = other.servers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteServerList Clone() {
      return new rspRemoteServerList(this);
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.rspRemoteServerList.Types.RemoteServer.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer> servers_ = new pbc::RepeatedField<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer> Servers {
      get { return servers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRemoteServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRemoteServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!servers_.Equals(other.servers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= servers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      servers_.WriteTo(output, _repeated_servers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += servers_.CalculateSize(_repeated_servers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRemoteServerList other) {
      if (other == null) {
        return;
      }
      servers_.Add(other.servers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the rspRemoteServerList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RemoteServer : pb::IMessage<RemoteServer> {
        private static readonly pb::MessageParser<RemoteServer> _parser = new pb::MessageParser<RemoteServer>(() => new RemoteServer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoteServer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.rspRemoteServerList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteServer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteServer(RemoteServer other) : this() {
          name_ = other.name_;
          ip_ = other.ip_;
          port_ = other.port_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteServer Clone() {
          return new RemoteServer(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ip" field.</summary>
        public const int IpFieldNumber = 2;
        private string ip_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Ip {
          get { return ip_; }
          set {
            ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 3;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoteServer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoteServer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Ip != other.Ip) return false;
          if (Port != other.Port) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Ip.Length != 0) hash ^= Ip.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Ip.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ip);
          }
          if (Port != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Port);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Ip.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoteServer other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Ip.Length != 0) {
            Ip = other.Ip;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Ip = input.ReadString();
                break;
              }
              case 24: {
                Port = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///register a localserver to a  remote server,ls represent a robot entity. from local server to remote server
  /// </summary>
  public sealed partial class reqRegisteLS : pb::IMessage<reqRegisteLS> {
    private static readonly pb::MessageParser<reqRegisteLS> _parser = new pb::MessageParser<reqRegisteLS>(() => new reqRegisteLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRegisteLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRegisteLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRegisteLS(reqRegisteLS other) : this() {
      udid_ = other.udid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRegisteLS Clone() {
      return new reqRegisteLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRegisteLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRegisteLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRegisteLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRegisteLS : pb::IMessage<rspRegisteLS> {
    private static readonly pb::MessageParser<rspRegisteLS> _parser = new pb::MessageParser<rspRegisteLS>(() => new rspRegisteLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRegisteLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRegisteLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRegisteLS(rspRegisteLS other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRegisteLS Clone() {
      return new rspRegisteLS(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRegisteLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRegisteLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRegisteLS other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///client login to a remote server , from client in internet to remote server
  /// </summary>
  public sealed partial class reqRemoteLogin : pb::IMessage<reqRemoteLogin> {
    private static readonly pb::MessageParser<reqRemoteLogin> _parser = new pb::MessageParser<reqRemoteLogin>(() => new reqRemoteLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRemoteLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteLogin(reqRemoteLogin other) : this() {
      type_ = other.type_;
      username_ = other.username_;
      userpwd_ = other.userpwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteLogin Clone() {
      return new reqRemoteLogin(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCltType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    /// <summary>
    /// nickname for clients/monitors, module name for LSM, ignored for RR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userpwd" field.</summary>
    public const int UserpwdFieldNumber = 3;
    private string userpwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userpwd {
      get { return userpwd_; }
      set {
        userpwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRemoteLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRemoteLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Username != other.Username) return false;
      if (Userpwd != other.Userpwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Userpwd.Length != 0) hash ^= Userpwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Userpwd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Userpwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Userpwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userpwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRemoteLogin other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Userpwd.Length != 0) {
        Userpwd = other.Userpwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Userpwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRemoteLogin : pb::IMessage<rspRemoteLogin> {
    private static readonly pb::MessageParser<rspRemoteLogin> _parser = new pb::MessageParser<rspRemoteLogin>(() => new rspRemoteLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRemoteLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteLogin(rspRemoteLogin other) : this() {
      lslist_ = other.lslist_.Clone();
      retcode_ = other.retcode_;
      yourRole_ = other.yourRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteLogin Clone() {
      return new rspRemoteLogin(this);
    }

    /// <summary>Field number for the "lslist" field.</summary>
    public const int LslistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.rspRemoteLogin.Types.LSEntity> _repeated_lslist_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.rspRemoteLogin.Types.LSEntity.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.rspRemoteLogin.Types.LSEntity> lslist_ = new pbc::RepeatedField<global::DDRCommProto.rspRemoteLogin.Types.LSEntity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.rspRemoteLogin.Types.LSEntity> Lslist {
      get { return lslist_; }
    }

    /// <summary>Field number for the "retcode" field.</summary>
    public const int RetcodeFieldNumber = 2;
    private global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode retcode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode Retcode {
      get { return retcode_; }
      set {
        retcode_ = value;
      }
    }

    /// <summary>Field number for the "yourRole" field.</summary>
    public const int YourRoleFieldNumber = 3;
    private global::DDRCommProto.eCltType yourRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType YourRole {
      get { return yourRole_; }
      set {
        yourRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRemoteLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRemoteLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lslist_.Equals(other.lslist_)) return false;
      if (Retcode != other.Retcode) return false;
      if (YourRole != other.YourRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lslist_.GetHashCode();
      if (Retcode != 0) hash ^= Retcode.GetHashCode();
      if (YourRole != 0) hash ^= YourRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lslist_.WriteTo(output, _repeated_lslist_codec);
      if (Retcode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Retcode);
      }
      if (YourRole != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) YourRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lslist_.CalculateSize(_repeated_lslist_codec);
      if (Retcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Retcode);
      }
      if (YourRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YourRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRemoteLogin other) {
      if (other == null) {
        return;
      }
      lslist_.Add(other.lslist_);
      if (other.Retcode != 0) {
        Retcode = other.Retcode;
      }
      if (other.YourRole != 0) {
        YourRole = other.YourRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lslist_.AddEntriesFrom(input, _repeated_lslist_codec);
            break;
          }
          case 16: {
            retcode_ = (global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode) input.ReadEnum();
            break;
          }
          case 24: {
            yourRole_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the rspRemoteLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eRemoteLoginRetCode {
        [pbr::OriginalName("success")] Success = 0,
        [pbr::OriginalName("server_busy")] ServerBusy = 1,
        [pbr::OriginalName("server_limit_reached")] ServerLimitReached = 2,
        [pbr::OriginalName("incorrect_password")] IncorrectPassword = 3,
      }

      public sealed partial class LSEntity : pb::IMessage<LSEntity> {
        private static readonly pb::MessageParser<LSEntity> _parser = new pb::MessageParser<LSEntity>(() => new LSEntity());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LSEntity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.rspRemoteLogin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LSEntity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LSEntity(LSEntity other) : this() {
          udid_ = other.udid_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LSEntity Clone() {
          return new LSEntity(this);
        }

        /// <summary>Field number for the "udid" field.</summary>
        public const int UdidFieldNumber = 1;
        private string udid_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Udid {
          get { return udid_; }
          set {
            udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LSEntity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LSEntity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Udid != other.Udid) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Udid.Length != 0) hash ^= Udid.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Udid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Udid);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Udid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LSEntity other) {
          if (other == null) {
            return;
          }
          if (other.Udid.Length != 0) {
            Udid = other.Udid;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Udid = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///remote client select a local server (a robot) to control or watch
  /// </summary>
  public sealed partial class reqSelectLS : pb::IMessage<reqSelectLS> {
    private static readonly pb::MessageParser<reqSelectLS> _parser = new pb::MessageParser<reqSelectLS>(() => new reqSelectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqSelectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqSelectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqSelectLS(reqSelectLS other) : this() {
      udid_ = other.udid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqSelectLS Clone() {
      return new reqSelectLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqSelectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqSelectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqSelectLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspSelectLS : pb::IMessage<rspSelectLS> {
    private static readonly pb::MessageParser<rspSelectLS> _parser = new pb::MessageParser<rspSelectLS>(() => new rspSelectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspSelectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspSelectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspSelectLS(rspSelectLS other) : this() {
      udid_ = other.udid_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspSelectLS Clone() {
      return new rspSelectLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspSelectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspSelectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspSelectLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqUnselectLS : pb::IMessage<reqUnselectLS> {
    private static readonly pb::MessageParser<reqUnselectLS> _parser = new pb::MessageParser<reqUnselectLS>(() => new reqUnselectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqUnselectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqUnselectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqUnselectLS(reqUnselectLS other) : this() {
      udid_ = other.udid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqUnselectLS Clone() {
      return new reqUnselectLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqUnselectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqUnselectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqUnselectLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspUnselectLS : pb::IMessage<rspUnselectLS> {
    private static readonly pb::MessageParser<rspUnselectLS> _parser = new pb::MessageParser<rspUnselectLS>(() => new rspUnselectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspUnselectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspUnselectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspUnselectLS(rspUnselectLS other) : this() {
      udid_ = other.udid_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspUnselectLS Clone() {
      return new rspUnselectLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspUnselectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspUnselectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspUnselectLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoteStreamChannel : pb::IMessage<RemoteStreamChannel> {
    private static readonly pb::MessageParser<RemoteStreamChannel> _parser = new pb::MessageParser<RemoteStreamChannel>(() => new RemoteStreamChannel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteStreamChannel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamChannel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamChannel(RemoteStreamChannel other) : this() {
      url_ = other.url_;
      uploadbandwidth_ = other.uploadbandwidth_;
      downloadbandwidth_ = other.downloadbandwidth_;
      srcname_ = other.srcname_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamChannel Clone() {
      return new RemoteStreamChannel(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uploadbandwidth" field.</summary>
    public const int UploadbandwidthFieldNumber = 2;
    private int uploadbandwidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uploadbandwidth {
      get { return uploadbandwidth_; }
      set {
        uploadbandwidth_ = value;
      }
    }

    /// <summary>Field number for the "downloadbandwidth" field.</summary>
    public const int DownloadbandwidthFieldNumber = 3;
    private int downloadbandwidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Downloadbandwidth {
      get { return downloadbandwidth_; }
      set {
        downloadbandwidth_ = value;
      }
    }

    /// <summary>Field number for the "srcname" field.</summary>
    public const int SrcnameFieldNumber = 4;
    private pb::ByteString srcname_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Srcname {
      get { return srcname_; }
      set {
        srcname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::DDRCommProto.RemoteStreamChannel.Types.StreamType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.RemoteStreamChannel.Types.StreamType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteStreamChannel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteStreamChannel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (Uploadbandwidth != other.Uploadbandwidth) return false;
      if (Downloadbandwidth != other.Downloadbandwidth) return false;
      if (Srcname != other.Srcname) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Uploadbandwidth != 0) hash ^= Uploadbandwidth.GetHashCode();
      if (Downloadbandwidth != 0) hash ^= Downloadbandwidth.GetHashCode();
      if (Srcname.Length != 0) hash ^= Srcname.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (Uploadbandwidth != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uploadbandwidth);
      }
      if (Downloadbandwidth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Downloadbandwidth);
      }
      if (Srcname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Srcname);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Uploadbandwidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uploadbandwidth);
      }
      if (Downloadbandwidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Downloadbandwidth);
      }
      if (Srcname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Srcname);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteStreamChannel other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Uploadbandwidth != 0) {
        Uploadbandwidth = other.Uploadbandwidth;
      }
      if (other.Downloadbandwidth != 0) {
        Downloadbandwidth = other.Downloadbandwidth;
      }
      if (other.Srcname.Length != 0) {
        Srcname = other.Srcname;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 16: {
            Uploadbandwidth = input.ReadInt32();
            break;
          }
          case 24: {
            Downloadbandwidth = input.ReadInt32();
            break;
          }
          case 34: {
            Srcname = input.ReadBytes();
            break;
          }
          case 40: {
            type_ = (global::DDRCommProto.RemoteStreamChannel.Types.StreamType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RemoteStreamChannel message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StreamType {
        [pbr::OriginalName("Video")] Video = 0,
        [pbr::OriginalName("Audio")] Audio = 1,
        [pbr::OriginalName("VideoAudio")] VideoAudio = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///local server to remote
  /// </summary>
  public sealed partial class reqRtspStreamUploadAddr : pb::IMessage<reqRtspStreamUploadAddr> {
    private static readonly pb::MessageParser<reqRtspStreamUploadAddr> _parser = new pb::MessageParser<reqRtspStreamUploadAddr>(() => new reqRtspStreamUploadAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRtspStreamUploadAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRtspStreamUploadAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRtspStreamUploadAddr(reqRtspStreamUploadAddr other) : this() {
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRtspStreamUploadAddr Clone() {
      return new reqRtspStreamUploadAddr(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.RemoteStreamChannel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.RemoteStreamChannel.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.RemoteStreamChannel> channels_ = new pbc::RepeatedField<global::DDRCommProto.RemoteStreamChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.RemoteStreamChannel> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRtspStreamUploadAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRtspStreamUploadAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRtspStreamUploadAddr other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRtspStreamUploadAddr : pb::IMessage<rspRtspStreamUploadAddr> {
    private static readonly pb::MessageParser<rspRtspStreamUploadAddr> _parser = new pb::MessageParser<rspRtspStreamUploadAddr>(() => new rspRtspStreamUploadAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRtspStreamUploadAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRtspStreamUploadAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRtspStreamUploadAddr(rspRtspStreamUploadAddr other) : this() {
      channels_ = other.channels_.Clone();
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRtspStreamUploadAddr Clone() {
      return new rspRtspStreamUploadAddr(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.RemoteStreamChannel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.RemoteStreamChannel.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.RemoteStreamChannel> channels_ = new pbc::RepeatedField<global::DDRCommProto.RemoteStreamChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.RemoteStreamChannel> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRtspStreamUploadAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRtspStreamUploadAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRtspStreamUploadAddr other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-----------------------------------FileOperation[[[[
  ///route is:     
  ///				RemoteClient    	 	--->			 RemoteServer    		--->	 		LocalServer    			--->	 	LocalService
  ///								reqRemoteFileAddress					notifyUploadFile							chkFileStatus
  ///				RemoteClient    	 	&lt;---			 RemoteServer    		&lt;---	 		LocalServer    			&lt;---	 	LocalService
  ///								rspRemoteFileAddress					notifyUploadFileProgress 					ansFileStatus
  ///remote client reqfile
  /// </summary>
  public sealed partial class reqRemoteFileAddress : pb::IMessage<reqRemoteFileAddress> {
    private static readonly pb::MessageParser<reqRemoteFileAddress> _parser = new pb::MessageParser<reqRemoteFileAddress>(() => new reqRemoteFileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRemoteFileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteFileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteFileAddress(reqRemoteFileAddress other) : this() {
      tarServiceType_ = other.tarServiceType_;
      fileType_ = other.fileType_;
      fileNames_ = other.fileNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteFileAddress Clone() {
      return new reqRemoteFileAddress(this);
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 1;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileNames" field.</summary>
    public const int FileNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileNames_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> fileNames_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// allow wildcards (*,?, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileNames {
      get { return fileNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRemoteFileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRemoteFileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarServiceType != other.TarServiceType) return false;
      if (FileType != other.FileType) return false;
      if(!fileNames_.Equals(other.fileNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TarServiceType);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileNames_.WriteTo(output, _repeated_fileNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileNames_.CalculateSize(_repeated_fileNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRemoteFileAddress other) {
      if (other == null) {
        return;
      }
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileNames_.Add(other.fileNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileNames_.AddEntriesFrom(input, _repeated_fileNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRemoteFileAddress : pb::IMessage<rspRemoteFileAddress> {
    private static readonly pb::MessageParser<rspRemoteFileAddress> _parser = new pb::MessageParser<rspRemoteFileAddress>(() => new rspRemoteFileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRemoteFileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteFileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteFileAddress(rspRemoteFileAddress other) : this() {
      tarServiceType_ = other.tarServiceType_;
      fileType_ = other.fileType_;
      fileAddrList_ = other.fileAddrList_.Clone();
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteFileAddress Clone() {
      return new rspRemoteFileAddress(this);
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 1;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileAddrList" field.</summary>
    public const int FileAddrListFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileAddrList_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> fileAddrList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// ignored if fileType!=FileContents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileAddrList {
      get { return fileAddrList_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRemoteFileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRemoteFileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarServiceType != other.TarServiceType) return false;
      if (FileType != other.FileType) return false;
      if(!fileAddrList_.Equals(other.fileAddrList_)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileAddrList_.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TarServiceType);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileAddrList_.WriteTo(output, _repeated_fileAddrList_codec);
      if (Error.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileAddrList_.CalculateSize(_repeated_fileAddrList_codec);
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRemoteFileAddress other) {
      if (other == null) {
        return;
      }
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileAddrList_.Add(other.fileAddrList_);
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileAddrList_.AddEntriesFrom(input, _repeated_fileAddrList_codec);
            break;
          }
          case 34: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///remote server notify localserver --> localhttpserver to upload files
  /// </summary>
  public sealed partial class notifyUploadFile : pb::IMessage<notifyUploadFile> {
    private static readonly pb::MessageParser<notifyUploadFile> _parser = new pb::MessageParser<notifyUploadFile>(() => new notifyUploadFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyUploadFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFile(notifyUploadFile other) : this() {
      httpAddr_ = other.httpAddr_;
      filefmt_ = other.filefmt_.Clone();
      existfiles_ = other.existfiles_.Clone();
      tarServiceType_ = other.tarServiceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFile Clone() {
      return new notifyUploadFile(this);
    }

    /// <summary>Field number for the "httpAddr" field.</summary>
    public const int HttpAddrFieldNumber = 1;
    private string httpAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAddr {
      get { return httpAddr_; }
      set {
        httpAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filefmt" field.</summary>
    public const int FilefmtFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_filefmt_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> filefmt_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// wildcards fmt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Filefmt {
      get { return filefmt_; }
    }

    /// <summary>Field number for the "existfiles" field.</summary>
    public const int ExistfilesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_existfiles_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> existfiles_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// relavtive path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Existfiles {
      get { return existfiles_; }
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 4;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyUploadFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyUploadFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpAddr != other.HttpAddr) return false;
      if(!filefmt_.Equals(other.filefmt_)) return false;
      if(!existfiles_.Equals(other.existfiles_)) return false;
      if (TarServiceType != other.TarServiceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpAddr.Length != 0) hash ^= HttpAddr.GetHashCode();
      hash ^= filefmt_.GetHashCode();
      hash ^= existfiles_.GetHashCode();
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpAddr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HttpAddr);
      }
      filefmt_.WriteTo(output, _repeated_filefmt_codec);
      existfiles_.WriteTo(output, _repeated_existfiles_codec);
      if (TarServiceType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TarServiceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAddr);
      }
      size += filefmt_.CalculateSize(_repeated_filefmt_codec);
      size += existfiles_.CalculateSize(_repeated_existfiles_codec);
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyUploadFile other) {
      if (other == null) {
        return;
      }
      if (other.HttpAddr.Length != 0) {
        HttpAddr = other.HttpAddr;
      }
      filefmt_.Add(other.filefmt_);
      existfiles_.Add(other.existfiles_);
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HttpAddr = input.ReadString();
            break;
          }
          case 18: {
            filefmt_.AddEntriesFrom(input, _repeated_filefmt_codec);
            break;
          }
          case 26: {
            existfiles_.AddEntriesFrom(input, _repeated_existfiles_codec);
            break;
          }
          case 32: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///local server notify remote server
  /// </summary>
  public sealed partial class notifyUploadFileProgress : pb::IMessage<notifyUploadFileProgress> {
    private static readonly pb::MessageParser<notifyUploadFileProgress> _parser = new pb::MessageParser<notifyUploadFileProgress>(() => new notifyUploadFileProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyUploadFileProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFileProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFileProgress(notifyUploadFileProgress other) : this() {
      progress_ = other.progress_;
      uploadedfiles_ = other.uploadedfiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFileProgress Clone() {
      return new notifyUploadFileProgress(this);
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private float progress_;
    /// <summary>
    ///0-1 ,1 is upload finish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "uploadedfiles" field.</summary>
    public const int UploadedfilesFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_uploadedfiles_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> uploadedfiles_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// relavtive path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Uploadedfiles {
      get { return uploadedfiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyUploadFileProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyUploadFileProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Progress, other.Progress)) return false;
      if(!uploadedfiles_.Equals(other.uploadedfiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Progress);
      hash ^= uploadedfiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Progress);
      }
      uploadedfiles_.WriteTo(output, _repeated_uploadedfiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Progress != 0F) {
        size += 1 + 4;
      }
      size += uploadedfiles_.CalculateSize(_repeated_uploadedfiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyUploadFileProgress other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      uploadedfiles_.Add(other.uploadedfiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Progress = input.ReadFloat();
            break;
          }
          case 18: {
            uploadedfiles_.AddEntriesFrom(input, _repeated_uploadedfiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///local server to LSM
  /// </summary>
  public sealed partial class chkFileStatus : pb::IMessage<chkFileStatus> {
    private static readonly pb::MessageParser<chkFileStatus> _parser = new pb::MessageParser<chkFileStatus>(() => new chkFileStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<chkFileStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chkFileStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chkFileStatus(chkFileStatus other) : this() {
      fileType_ = other.fileType_;
      filefmt_ = other.filefmt_.Clone();
      existfiles_ = other.existfiles_.Clone();
      tarServiceType_ = other.tarServiceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chkFileStatus Clone() {
      return new chkFileStatus(this);
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 1;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "filefmt" field.</summary>
    public const int FilefmtFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_filefmt_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> filefmt_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// wildcards fmt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Filefmt {
      get { return filefmt_; }
    }

    /// <summary>Field number for the "existfiles" field.</summary>
    public const int ExistfilesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_existfiles_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> existfiles_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// relavtive path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Existfiles {
      get { return existfiles_; }
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 4;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as chkFileStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(chkFileStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileType != other.FileType) return false;
      if(!filefmt_.Equals(other.filefmt_)) return false;
      if(!existfiles_.Equals(other.existfiles_)) return false;
      if (TarServiceType != other.TarServiceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= filefmt_.GetHashCode();
      hash ^= existfiles_.GetHashCode();
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FileType);
      }
      filefmt_.WriteTo(output, _repeated_filefmt_codec);
      existfiles_.WriteTo(output, _repeated_existfiles_codec);
      if (TarServiceType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TarServiceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += filefmt_.CalculateSize(_repeated_filefmt_codec);
      size += existfiles_.CalculateSize(_repeated_existfiles_codec);
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(chkFileStatus other) {
      if (other == null) {
        return;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      filefmt_.Add(other.filefmt_);
      existfiles_.Add(other.existfiles_);
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 18: {
            filefmt_.AddEntriesFrom(input, _repeated_filefmt_codec);
            break;
          }
          case 26: {
            existfiles_.AddEntriesFrom(input, _repeated_existfiles_codec);
            break;
          }
          case 32: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///LSM to local server
  /// </summary>
  public sealed partial class ansFileStatus : pb::IMessage<ansFileStatus> {
    private static readonly pb::MessageParser<ansFileStatus> _parser = new pb::MessageParser<ansFileStatus>(() => new ansFileStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ansFileStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.RemoteCmdReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ansFileStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ansFileStatus(ansFileStatus other) : this() {
      fileType_ = other.fileType_;
      fileAddrList_ = other.fileAddrList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ansFileStatus Clone() {
      return new ansFileStatus(this);
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 1;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileAddrList" field.</summary>
    public const int FileAddrListFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileAddrList_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> fileAddrList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// no wildcards
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileAddrList {
      get { return fileAddrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ansFileStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ansFileStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileType != other.FileType) return false;
      if(!fileAddrList_.Equals(other.fileAddrList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileAddrList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FileType);
      }
      fileAddrList_.WriteTo(output, _repeated_fileAddrList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileAddrList_.CalculateSize(_repeated_fileAddrList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ansFileStatus other) {
      if (other == null) {
        return;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileAddrList_.Add(other.fileAddrList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 18: {
            fileAddrList_.AddEntriesFrom(input, _repeated_fileAddrList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
