// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BaseCmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DDRCommProto {

  /// <summary>Holder for reflection information generated from BaseCmd.proto</summary>
  public static partial class BaseCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for BaseCmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1CYXNlQ21kLnByb3RvEgxERFJDb21tUHJvdG8isgMKDENvbW1vbkhlYWRl",
            "chIQCghib2R5VHlwZRgBIAEoCRIrCgtmcm9tQ2x0VHlwZRgCIAEoDjIWLkRE",
            "UkNvbW1Qcm90by5lQ2x0VHlwZRIpCgl0b0NsdFR5cGUYAyABKA4yFi5ERFJD",
            "b21tUHJvdG8uZUNsdFR5cGUSOgoNcGFzc05vZGVBcnJheRgEIAMoCzIjLkRE",
            "UkNvbW1Qcm90by5Db21tb25IZWFkZXIuUGFzc05vZGUSOgoNZmxvd0RpcmVj",
            "dGlvbhgFIAMoDjIjLkREUkNvbW1Qcm90by5Db21tb25IZWFkZXIuZUZsb3dE",
            "aXIacgoIUGFzc05vZGUSKAoIbm9kZVR5cGUYASABKA4yFi5ERFJDb21tUHJv",
            "dG8uZUNsdFR5cGUSGAoQcmVjZWl2ZVNlc3Npb25JRBgCIAEoAxISCgpJbnRw",
            "dHJEYXRhGAMgAygDEg4KBmZyb21JUBgEIAEoCSJMCghlRmxvd0RpchILCgdG",
            "b3J3YXJkEAASDAoIQmFja3dhcmQQARIRCg1SZWNvcmRJblF1ZXVlEAISEgoO",
            "UmV0dXJuUG9wUXVldWUQAyIdCglIZWFydEJlYXQSEAoId2hhdGV2ZXIYASAB",
            "KAkiJQoTcmVxUmVtb3RlU2VydmVyTGlzdBIOCgZmcm9taXAYASABKAkijgEK",
            "E3JzcFJlbW90ZVNlcnZlckxpc3QSPwoHc2VydmVycxgBIAMoCzIuLkREUkNv",
            "bW1Qcm90by5yc3BSZW1vdGVTZXJ2ZXJMaXN0LlJlbW90ZVNlcnZlcho2CgxS",
            "ZW1vdGVTZXJ2ZXISDAoEbmFtZRgBIAEoCRIKCgJpcBgCIAEoCRIMCgRwb3J0",
            "GAMgASgFIioKDHJlcVJlZ2lzdGVMUxIMCgR1ZGlkGAEgASgJEgwKBG5hbWUY",
            "AiABKAkiHQoMcnNwUmVnaXN0ZUxTEg0KBWVycm9yGAEgASgJIlkKDnJlcVJl",
            "bW90ZUxvZ2luEiQKBHR5cGUYASABKA4yFi5ERFJDb21tUHJvdG8uZUNsdFR5",
            "cGUSEAoIdXNlcm5hbWUYAiABKAkSDwoHdXNlcnB3ZBgDIAEoCSLDAgoOcnNw",
            "UmVtb3RlTG9naW4SNQoGbHNsaXN0GAEgAygLMiUuRERSQ29tbVByb3RvLnJz",
            "cFJlbW90ZUxvZ2luLkxTRW50aXR5EkEKB3JldGNvZGUYAiABKA4yMC5ERFJD",
            "b21tUHJvdG8ucnNwUmVtb3RlTG9naW4uZVJlbW90ZUxvZ2luUmV0Q29kZRIo",
            "Cgh5b3VyUm9sZRgDIAEoDjIWLkREUkNvbW1Qcm90by5lQ2x0VHlwZRomCghM",
            "U0VudGl0eRIMCgR1ZGlkGAEgASgJEgwKBG5hbWUYAiABKAkiZQoTZVJlbW90",
            "ZUxvZ2luUmV0Q29kZRILCgdzdWNjZXNzEAASDwoLc2VydmVyX2J1c3kQARIY",
            "ChRzZXJ2ZXJfbGltaXRfcmVhY2hlZBACEhYKEmluY29ycmVjdF9wYXNzd29y",
            "ZBADIhsKC3JlcVNlbGVjdExTEgwKBHVkaWQYASABKAkiHAoLcnNwU2VsZWN0",
            "TFMSDQoFZXJyb3IYASABKAkiHQoNcmVxVW5zZWxlY3RMUxIMCgR1ZGlkGAEg",
            "ASgJIh4KDXJzcFVuc2VsZWN0TFMSDQoFZXJyb3IYASABKAkilwIKCGJjTFNB",
            "ZGRyEjIKB0xTSW5mb3MYASADKAsyIS5ERFJDb21tUHJvdG8uYmNMU0FkZHIu",
            "U2VydmVySW5mbxp6CgpTZXJ2ZXJJbmZvEgwKBG5hbWUYASABKAkSMgoFc3R5",
            "cGUYAiABKA4yIy5ERFJDb21tUHJvdG8uYmNMU0FkZHIuZVNlcnZpY2VUeXBl",
            "EgsKA2lwcxgDIAMoCRIMCgRwb3J0GAQgASgFEg8KB3JvYm90aWQYBSABKAki",
            "WwoMZVNlcnZpY2VUeXBlEg8KC0xvY2FsU2VydmVyEAASEAoMUmVtb3RlU2Vy",
            "dmVyEAESFAoQUlRTUFN0cmVhbVNlcnZlchACEhIKDlRhbGtCYWNrU2VydmVy",
            "EAMiUwoIcmVxTG9naW4SJAoEdHlwZRgBIAEoDjIWLkREUkNvbW1Qcm90by5l",
            "Q2x0VHlwZRIQCgh1c2VybmFtZRgCIAEoCRIPCgd1c2VycHdkGAMgASgJIswB",
            "Cghyc3BMb2dpbhI1CgdyZXRjb2RlGAEgASgOMiQuRERSQ29tbVByb3RvLnJz",
            "cExvZ2luLmVMb2dpblJldENvZGUSKAoIeW91clJvbGUYAiABKA4yFi5ERFJD",
            "b21tUHJvdG8uZUNsdFR5cGUiXwoNZUxvZ2luUmV0Q29kZRILCgdzdWNjZXNz",
            "EAASDwoLc2VydmVyX2J1c3kQARIYChRzZXJ2ZXJfbGltaXRfcmVhY2hlZBAC",
            "EhYKEmluY29ycmVjdF9wYXNzd29yZBADIjcKCnJlcUNtZE1vdmUSEgoKbGlu",
            "ZV9zcGVlZBgBIAEoAhIVCg1hbmd1bGF1X3NwZWVkGAIgASgCIjUKCnJzcENt",
            "ZE1vdmUSJwoEdHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNwVHlw",
            "ZSImChFyZXFDbWRDaGFuZ2VTcGVlZBIRCglhZGRfc3BlZWQYASABKAUiPAoR",
            "cnNwQ21kQ2hhbmdlU3BlZWQSJwoEdHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90",
            "by5lQ21kUnNwVHlwZSIiChFyZXFDbWRQYXVzZVJlc3VtZRINCgVlcnJvchgB",
            "IAEoCSI8ChFyc3BDbWRQYXVzZVJlc3VtZRInCgR0eXBlGAEgASgOMhkuRERS",
            "Q29tbVByb3RvLmVDbWRSc3BUeXBlIkQKCXJlcUNtZElQQxInCgRtb2RlGAEg",
            "ASgOMhkuRERSQ29tbVByb3RvLmVDbWRJUENNb2RlEg4KBnZhbHVlcxgCIAEo",
            "BSJtCglyc3BDbWRJUEMSJwoEbW9kZRgBIAEoDjIZLkREUkNvbW1Qcm90by5l",
            "Q21kSVBDTW9kZRInCgR0eXBlGAIgASgOMhkuRERSQ29tbVByb3RvLmVDbWRS",
            "c3BUeXBlEg4KBnZhbHVlcxgDIAEoBSLuAQoLcmVxQ21kQXVkaW8SOwoGYXVk",
            "aW9wGAEgASgOMisuRERSQ29tbVByb3RvLnJlcUNtZEF1ZGlvLmVBdWRpb09w",
            "ZXJhdGlvbmFsEjIKBHR5cGUYAiABKA4yJC5ERFJDb21tUHJvdG8ucmVxQ21k",
            "QXVkaW8uZUF1ZGlvTW9kZRIQCghBdWRpb3N0chgDIAEoDBINCgVsZXZlbBgE",
            "IAEoBSIhCgplQXVkaW9Nb2RlEggKBGVUVFMQABIJCgVlRmlsZRABIioKEWVB",
            "dWRpb09wZXJhdGlvbmFsEgoKBmVTdGFydBAAEgkKBWVTdG9wEAEiNgoLcnNw",
            "Q21kQXVkaW8SJwoEdHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNw",
            "VHlwZSI0ChJyZXFDbWRVcGRhdGVDb25maWcSDAoEZGF0YRgBIAEoCRIQCghk",
            "YXRhbmFtZRgCIAEoCSJPChJyc3BDbWRVcGRhdGVDb25maWcSJwoEdHlwZRgB",
            "IAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNwVHlwZRIQCghkYXRhbmFtZRgC",
            "IAEoCSIkChNyZXFDbWRHZXRDb25maWdkYXRhEg0KBWVycm9yGAEgASgJIlIK",
            "E3JzcENtZEdldENvbmZpZ2RhdGESJwoEdHlwZRgBIAEoDjIZLkREUkNvbW1Q",
            "cm90by5lQ21kUnNwVHlwZRISCgpjb25maWdkYXRhGAIgAygFIl0KEXJlcUNt",
            "ZFNldFdvcmtQYXRoEhIKCnJvdXRlX25hbWUYASABKAwSEQoJcGF0aF9uYW1l",
            "GAIgASgJEg0KBXNwZWVkGAMgASgCEhIKCndhbGtfc3R5bGUYBCABKAkiPAoR",
            "cnNwQ21kU2V0V29ya1BhdGgSJwoEdHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90",
            "by5lQ21kUnNwVHlwZSKbAQoOcmVxQ21kQXV0b0NoYXQSOAoEdHlwZRgBIAEo",
            "DjIqLkREUkNvbW1Qcm90by5yZXFDbWRBdXRvQ2hhdC5lQXV0b0NoYXRUeXBl",
            "Eg4KBmNvbW51bRgCIAEoBSI/Cg1lQXV0b0NoYXRUeXBlEhAKDGVTdGFydE9u",
            "bGluZRAAEhEKDWVTdGFydE9mZmxpbmUQARIJCgVlU3RvcBACIjkKDnJzcENt",
            "ZEF1dG9DaGF0EicKBHR5cGUYASABKA4yGS5ERFJDb21tUHJvdG8uZUNtZFJz",
            "cFR5cGUijgEKE3JlcUNtZEdlbmVyYWxPY3RyZWUSEgoKcm91dGVfbmFtZRgB",
            "IAEoDBI7CgR0eXBlGAIgASgOMi0uRERSQ29tbVByb3RvLnJlcUNtZEdlbmVy",
            "YWxPY3RyZWUuZU9jdHJlZVR5cGUiJgoLZU9jdHJlZVR5cGUSCwoHZUNyZWF0",
            "ZRAAEgoKBmVRdWVyeRABIsUBChNyc3BDbWRHZW5lcmFsT2N0cmVlEicKBHR5",
            "cGUYASABKA4yGS5ERFJDb21tUHJvdG8uZUNtZFJzcFR5cGUSPwoFb3R5cGUY",
            "AiABKA4yMC5ERFJDb21tUHJvdG8ucnNwQ21kR2VuZXJhbE9jdHJlZS5lUnNw",
            "T2N0cmVlVHlwZSJECg5lUnNwT2N0cmVlVHlwZRISCg5lRmlsZU5vdEV4aXN0",
            "cxAAEg8KC2VGaWxlRXhpc3RzEAESDQoJZUluQ3JlYXRlEAIiVwoVcmVxQ21k",
            "U3RhcnRBY3Rpb25Nb2RlEioKBG1vZGUYASABKA4yHC5ERFJDb21tUHJvdG8u",
            "ZUNtZEFjdGlvbk1vZGUSEgoKcm91dGVfbmFtZRgCIAEoDCJsChVyc3BDbWRT",
            "dGFydEFjdGlvbk1vZGUSKgoEbW9kZRgBIAEoDjIcLkREUkNvbW1Qcm90by5l",
            "Q21kQWN0aW9uTW9kZRInCgR0eXBlGAIgASgOMhkuRERSQ29tbVByb3RvLmVD",
            "bWRSc3BUeXBlIiQKE3JlcUNtZEVuZEFjdGlvbk1vZGUSDQoFZXJyb3IYASAB",
            "KAkihAEKE3JzcENtZEVuZEFjdGlvbk1vZGUSMAoKYWN0aW9ubW9kZRgBIAEo",
            "DjIcLkREUkNvbW1Qcm90by5lQ21kQWN0aW9uTW9kZRInCgR0eXBlGAIgASgO",
            "MhkuRERSQ29tbVByb3RvLmVDbWRSc3BUeXBlEhIKCnJvdXRlX25hbWUYAyAB",
            "KAwiRAobcmVxQ21kRGVsZXRlQ3VyclJvdXRlT3JQYXRoEhIKCnJvdXRlX25h",
            "bWUYASABKAwSEQoJcGF0aF9uYW1lGAIgASgMIkYKG3JzcENtZERlbGV0ZUN1",
            "cnJSb3V0ZU9yUGF0aBInCgR0eXBlGAEgASgOMhkuRERSQ29tbVByb3RvLmVD",
            "bWRSc3BUeXBlIioKGXJlcUNtZEdldEN1cnJSb3V0ZUFuZFBhdGgSDQoFZXJy",
            "b3IYASABKAkiMgoJUm91dGVEYXRhEhIKCnJvdXRlX25hbWUYASABKAwSEQoJ",
            "cGF0aF9uYW1lGAIgAygMInEKGXJzcENtZEdldEN1cnJSb3V0ZUFuZFBhdGgS",
            "JwoEdHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNwVHlwZRIrCgpy",
            "b3V0ZV9kYXRhGAIgAygLMhcuRERSQ29tbVByb3RvLlJvdXRlRGF0YSLKAwoQ",
            "bm90aWZ5QmFzZVN0YXR1cxIMCgRtb2RlGAEgASgFEg8KB3Nvbm1vZGUYAiAB",
            "KAUSDAoEYmF0dBgDIAEoAhIMCgR0ZW1wGAQgASgCEgsKA2h1bRgFIAEoAhIM",
            "CgRwbTI1GAYgASgCEhAKCHN0b3BzdGF0GAcgASgFEhAKCGZ1bmNzdGF0GAgg",
            "ASgDEhEKCXZvaWNlbG9vcBgJIAEoBRIRCgljdXJycm91dGUYCiABKAwSEAoI",
            "Y3VycnBhdGgYCyABKAkSEQoJY3VycnNwZWVkGAwgASgCEhUKDWN1cnJ3YWxr",
            "c3R5bGUYDSABKAkSDAoEcG9zeBgOIAEoAhIMCgRwb3N5GA8gASgCEhQKDHBv",
            "c2RpcmVjdGlvbhgQIAEoAhIUCgxwb3NsaW5lc3BlZWQYESABKAISFwoPcG9z",
            "YW5ndWxhdXNwZWVkGBIgASgCEhEKCWxvbmdpdHVkZRgTIAEoARIQCghsYXRp",
            "dHVkZRgUIAEoARIRCgl0aW1lc3RhbXAYFSABKAMSEwoLdGhlcm1hbG1heHgY",
            "FiABKAUSEwoLdGhlcm1hbG1heHkYFyABKAUSFwoPdGhlcm1hbG1heHZhbHVl",
            "GBggASgCIjwKBk9BSW5mbxISCgpzdGFydGFuZ2xlGAEgASgCEhAKCGVuZGFu",
            "Z2xlGAIgASgCEgwKBGRpc3QYAyABKAIiWAoNbm90aWZ5T2JzRGF0YRIQCghn",
            "cmVlZHJlZBgBIAEoBRIPCgdtYXhkaXN0GAIgASgCEiQKBm9hc3RhdBgDIAMo",
            "CzIULkREUkNvbW1Qcm90by5PQUluZm8ilQEKD25vdGlmeUFsYXJtSW5mbxI2",
            "CgR0eXBlGAEgASgOMiguRERSQ29tbVByb3RvLm5vdGlmeUFsYXJtSW5mby5l",
            "QWxhcm1UeXBlEhQKDGFsYXJtY29udGVudBgCIAEoCSI0CgplQWxhcm1UeXBl",
            "EhEKDWVUaGVybWFsQWxhcm0QABITCg9lT2JzU3RhdHVzQWxhcm0QASKAAQoS",
            "bm90aWZ5QWxhcm1OZXdGYWNlEicKBHR5cGUYASABKA4yGS5ERFJDb21tUHJv",
            "dG8uZVBlcnNvblR5cGUSDAoEbmFtZRgCIAEoCRINCgVzb2NyZRgDIAEoAhIQ",
            "CghwcmV2dGltZRgEIAEoAxISCgpmYWNlZGVjb2RlGAUgAygFIogBCgxBbGFy",
            "bUZpcmVQb3MSDAoEcG9zeBgBIAEoBRIMCgRwb3N5GAIgASgFEhAKCHBvc3dp",
            "ZHRoGAMgASgFEhEKCXBvc2hlaWdodBgEIAEoBRIOCgZtYXh0ZW0YBSABKAUS",
            "DgoGYXZndGVtGAYgASgFEhcKD2FsYXJtcG9pbnRjb3VudBgHIAEoBSI6Cg9u",
            "b3RpZnlBbGFybUZpcmUSJwoDcG9zGAEgAygLMhouRERSQ29tbVByb3RvLkFs",
            "YXJtRmlyZVBvcyKQAQoNY2hrRmlsZVN0YXR1cxIqCghmaWxlVHlwZRgBIAEo",
            "DjIYLkREUkNvbW1Qcm90by5lRmlsZVR5cGVzEg8KB2ZpbGVmbXQYAiADKAwS",
            "EgoKZXhpc3RmaWxlcxgDIAMoDBIuCg50YXJTZXJ2aWNlVHlwZRgEIAEoDjIW",
            "LkREUkNvbW1Qcm90by5lQ2x0VHlwZSJRCg1hbnNGaWxlU3RhdHVzEioKCGZp",
            "bGVUeXBlGAEgASgOMhguRERSQ29tbVByb3RvLmVGaWxlVHlwZXMSFAoMZmls",
            "ZUFkZHJMaXN0GAIgAygMInkKEG5vdGlmeVVwbG9hZEZpbGUSEAoIaHR0cEFk",
            "ZHIYASABKAkSDwoHZmlsZWZtdBgCIAMoDBISCgpleGlzdGZpbGVzGAMgAygM",
            "Ei4KDnRhclNlcnZpY2VUeXBlGAQgASgOMhYuRERSQ29tbVByb3RvLmVDbHRU",
            "eXBlIkMKGG5vdGlmeVVwbG9hZEZpbGVQcm9ncmVzcxIQCghwcm9ncmVzcxgB",
            "IAEoAhIVCg11cGxvYWRlZGZpbGVzGAIgAygMIh4KCXJlcVN0YXR1cxIRCglz",
            "dGF0dXNNc2cYASABKAkiHQoMcmVxRmFjZUFsYXJtEg0KBWVycm9yGAEgASgJ",
            "IhwKC3JlcUhvdEFsYXJtEg0KBWVycm9yGAEgASgJIhwKC3JlcU9ic0FsYXJt",
            "Eg0KBWVycm9yGAEgASgJIh8KC3JlcVRleHRDaGF0EhAKCGNoYXRUZXh0GAEg",
            "ASgJIsEBChJBVlN0cmVhbVNyY0NoYW5uZWwSDwoHc3JjQWRkchgBIAEoCRIP",
            "CgdzcmNQb3J0GAIgAygFEjMKCnN0cmVhbVR5cGUYAyABKA4yHy5ERFJDb21t",
            "UHJvdG8uQ2hhbm5lbFN0cmVhbVR5cGUSNQoLbmV0d29ya1R5cGUYBCABKA4y",
            "IC5ERFJDb21tUHJvdG8uQ2hhbm5lbE5ldHdvcmtUeXBlEgwKBHJhdGUYBSAB",
            "KAUSDwoHc3JjbmFtZRgGIAEoDCJGCg1yZXFTdHJlYW1BZGRyEjUKC25ldHdv",
            "cmtUeXBlGAEgASgOMiAuRERSQ29tbVByb3RvLkNoYW5uZWxOZXR3b3JrVHlw",
            "ZSJSCg1yc3BTdHJlYW1BZGRyEjIKCGNoYW5uZWxzGAEgAygLMiAuRERSQ29t",
            "bVByb3RvLkFWU3RyZWFtU3JjQ2hhbm5lbBINCgVlcnJvchgDIAEoCSK/AQoM",
            "cmVxQXVkaW9UYWxrEjIKBm9wVHlwZRgBIAEoDjIiLkREUkNvbW1Qcm90by5y",
            "ZXFBdWRpb1RhbGsuZU9wTW9kZRI0CgduZXRUeXBlGAIgASgOMiMuRERSQ29t",
            "bVByb3RvLnJlcUF1ZGlvVGFsay5lTmV0VHlwZSIgCgdlT3BNb2RlEgoKBmVT",
            "dGFydBAAEgkKBWVTdG9wEAEiIwoIZU5ldFR5cGUSCgoGZUxvY2FsEAASCwoH",
            "ZVJlbW90ZRABIkgKDHJzcEF1ZGlvVGFsaxIpCgZzdGF0dXMYASABKA4yGS5E",
            "RFJDb21tUHJvdG8uZVRhbGtTdGF0dXMSDQoFZXJyb3IYAiABKAkiVQoQbm90",
            "aWZ5U3RyZWFtQWRkchIyCghjaGFubmVscxgBIAMoCzIgLkREUkNvbW1Qcm90",
            "by5BVlN0cmVhbVNyY0NoYW5uZWwSDQoFZXJyb3IYAyABKAkiUgoLbm90aWZ5",
            "QWxhcm0SJAoEZnJvbRgBIAEoDjIWLkREUkNvbW1Qcm90by5lQ2x0VHlwZRIO",
            "CgZmcm9tSVAYAiABKAkSDQoFZXJyb3IYAyABKAkifwoOcmVxRmlsZUFkZHJl",
            "c3MSLgoOdGFyU2VydmljZVR5cGUYASABKA4yFi5ERFJDb21tUHJvdG8uZUNs",
            "dFR5cGUSKgoIZmlsZVR5cGUYAiABKA4yGC5ERFJDb21tUHJvdG8uZUZpbGVU",
            "eXBlcxIRCglmaWxlTmFtZXMYAyADKAwikQEKDnJzcEZpbGVBZGRyZXNzEi4K",
            "DnRhclNlcnZpY2VUeXBlGAEgASgOMhYuRERSQ29tbVByb3RvLmVDbHRUeXBl",
            "EioKCGZpbGVUeXBlGAIgASgOMhguRERSQ29tbVByb3RvLmVGaWxlVHlwZXMS",
            "FAoMZmlsZUFkZHJMaXN0GAMgAygMEg0KBWVycm9yGAQgASgJIoUBChRyZXFS",
            "ZW1vdGVGaWxlQWRkcmVzcxIuCg50YXJTZXJ2aWNlVHlwZRgBIAEoDjIWLkRE",
            "UkNvbW1Qcm90by5lQ2x0VHlwZRIqCghmaWxlVHlwZRgCIAEoDjIYLkREUkNv",
            "bW1Qcm90by5lRmlsZVR5cGVzEhEKCWZpbGVOYW1lcxgDIAMoDCKXAQoUcnNw",
            "UmVtb3RlRmlsZUFkZHJlc3MSLgoOdGFyU2VydmljZVR5cGUYASABKA4yFi5E",
            "RFJDb21tUHJvdG8uZUNsdFR5cGUSKgoIZmlsZVR5cGUYAiABKA4yGC5ERFJD",
            "b21tUHJvdG8uZUZpbGVUeXBlcxIUCgxmaWxlQWRkckxpc3QYAyADKAwSDQoF",
            "ZXJyb3IYBCABKAkitgEKD0FWQ2hhbm5lbENvbmZpZxILCgNzcmMYASABKAkS",
            "CwoDZHN0GAIgASgJEjMKCnN0cmVhbVR5cGUYAyABKA4yHy5ERFJDb21tUHJv",
            "dG8uQ2hhbm5lbFN0cmVhbVR5cGUSNQoLbmV0d29ya1R5cGUYBCABKA4yIC5E",
            "RFJDb21tUHJvdG8uQ2hhbm5lbE5ldHdvcmtUeXBlEgwKBHJhdGUYBSABKAUS",
            "DwoHc3JjbmFtZRgGIAEoDCIkChRyZXFTdHJlYW1TZXJ2aWNlSW5mbxIMCgRu",
            "YW1lGAEgASgJIlgKFHJzcFN0cmVhbVNlcnZpY2VJbmZvEg8KB3RjcFBvcnQY",
            "ASABKAUSLwoIY2hhbm5lbHMYAiADKAsyHS5ERFJDb21tUHJvdG8uQVZDaGFu",
            "bmVsQ29uZmlnIlEKHm5vdGlmeVN0cmVhbVNlcnZpY2VJbmZvQ2hhbmdlZBIv",
            "CghjaGFubmVscxgBIAMoCzIdLkREUkNvbW1Qcm90by5BVkNoYW5uZWxDb25m",
            "aWciSAoTcmVxU3RyZWFtUmVsYXlBbGFybRINCgVlcnJvchgBIAEoCRIiCgJ0",
            "bxgCIAMoDjIWLkREUkNvbW1Qcm90by5lQ2x0VHlwZSIpChNUaGVybWFsU2Vy",
            "dmVyQ29uZmlnEhIKCmFsYXJtX3RlbXAYASABKAIiJwoWcmVxQ21kR2V0VGhl",
            "cm1hbFBhcmFtcxINCgVlcnJvchgBIAEoCSJTChZyc3BDbWRHZXRUaGVybWFs",
            "UGFyYW1zEjkKDnRoZXJtYWxfY29uZmlnGAEgASgLMiEuRERSQ29tbVByb3Rv",
            "LlRoZXJtYWxTZXJ2ZXJDb25maWciUwoWcmVxQ21kU2V0VGhlcm1hbFBhcmFt",
            "cxI5Cg50aGVybWFsX2NvbmZpZxgBIAEoCzIhLkREUkNvbW1Qcm90by5UaGVy",
            "bWFsU2VydmVyQ29uZmlnIkEKFnJzcENtZFNldFRoZXJtYWxQYXJhbXMSJwoE",
            "dHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNwVHlwZSJXCg1yZXFD",
            "bWRBZGRGYWNlEgwKBG5hbWUYASABKAwSJwoEdHlwZRgCIAEoDjIZLkREUkNv",
            "bW1Qcm90by5lUGVyc29uVHlwZRIPCgdwaWNkYXRhGAMgAygFIjgKDXJzcENt",
            "ZEFkZEZhY2USJwoEdHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNw",
            "VHlwZSIoChdyZXFDbWRGYWNlRGF0YUJhc2VPcmRlchINCgVPcmRlchgBIAEo",
            "CSJkChBGYWNlRGF0YUJhc2VEYXRhEgoKAmlkGAEgASgFEgwKBG5hbWUYAiAB",
            "KAwSJwoEdHlwZRgDIAEoDjIZLkREUkNvbW1Qcm90by5lUGVyc29uVHlwZRIN",
            "CgVsYWJlbBgEIAEoCSLIAQoXcnNwQ21kRmFjZURhdGFCYXNlT3JkZXISJwoE",
            "dHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNwVHlwZRIsCgRkYXRh",
            "GAIgAygLMh4uRERSQ29tbVByb3RvLkZhY2VEYXRhQmFzZURhdGEiVgoQZVJz",
            "cERhdGFCYXNlVHlwZRIKCgZlRXJyb3IQABIPCgtlUXVlcnlDb3VudBABEhIK",
            "DmVEZWxldGVTdWNjZXNzEAISEQoNZURldGFpbGVkRGF0YRADIjwKEEZhY2VT",
            "ZXJ2ZXJDb25maWcSEgoKQ29uZmlkZW5jZRgBIAEoAhIUCgxGYWNlX3F1YWxp",
            "dHkYAiABKAIiJAoTcmVxQ21kR2V0RmFjZVBhcmFtcxINCgVlcnJvchgBIAEo",
            "CSJKChNyc3BDbWRHZXRGYWNlUGFyYW1zEjMKC0ZhY2VfY29uZmlnGAEgASgL",
            "Mh4uRERSQ29tbVByb3RvLkZhY2VTZXJ2ZXJDb25maWciSgoTcmVxQ21kU2V0",
            "RmFjZVBhcmFtcxIzCgtGYWNlX2NvbmZpZxgBIAEoCzIeLkREUkNvbW1Qcm90",
            "by5GYWNlU2VydmVyQ29uZmlnIj4KE3JzcENtZFNldEZhY2VQYXJhbXMSJwoE",
            "dHlwZRgBIAEoDjIZLkREUkNvbW1Qcm90by5lQ21kUnNwVHlwZSqvAgoIZUNs",
            "dFR5cGUSCQoFZU51bGwQABISCg5lTG9jYWxQQ0NsaWVudBABEhcKE2VMb2Nh",
            "bEFuZHJvaWRDbGllbnQQAhITCg9lUmVtb3RlUENDbGllbnQQBBIYChRlUmVt",
            "b3RlQW5kcm9pZENsaWVudBAIEg8KCmVBbGxDbGllbnQQ/wESFAoPZUxTTVN0",
            "cmVhbVJlbGF5EIACEhcKEmVMU01TbGFtTmF2aWdhdGlvbhCABBIYChNlTFNN",
            "RmFjZVJlY29nbml0aW9uEIAIEhcKEmVMU01UaGVybWFsSW1hZ2luZxCAEBIN",
            "CgdlQWxsTFNNEID+AxISCgxlTG9jYWxTZXJ2ZXIQgIAEEhMKDWVSZW1vdGVT",
            "ZXJ2ZXIQgIAIEhEKCmVBbGxTZXJ2ZXIQgID8ByphCgtlQ21kUnNwVHlwZRIM",
            "CghlU3VjY2VzcxAAEg4KCmVDbWRGYWlsZWQQARIQCgxlTm9BdXRob3JpdHkQ",
            "AhIRCg1lUm9ib3ROb0xvZ2luEAMSDwoLZUxTTU5vTG9naW4QBCo3CgtlQ21k",
            "SVBDTW9kZRINCgllU2h1dERvd24QABIMCghlUmVTdGFydBABEgsKB2VWb2x1",
            "bWUQAip7Cg5lQ21kQWN0aW9uTW9kZRIQCgxlQXV0b0R5bmFtaWMQABIPCgtl",
            "QXV0b1N0YXRpYxABEhUKEWVCbGluZFdhbGREeW5hbWljEAISFAoQZUJsaW5k",
            "V2FsZFN0YXRpYxADEggKBGVSZWMQBBIPCgtlUmVDaGFyZ2luZxAFKjMKCmVG",
            "aWxlVHlwZXMSEAoMRmlsZUNvbnRlbnRzEAASEwoPRmlsZUh0dHBBZGRyZXNz",
            "EAEqKwoSQ2hhbm5lbE5ldHdvcmtUeXBlEgkKBUxvY2FsEAASCgoGUmVtb3Rl",
            "EAEqOQoRQ2hhbm5lbFN0cmVhbVR5cGUSCQoFVmlkZW8QABIJCgVBdWRpbxAB",
            "Eg4KClZpZGVvQXVkaW8QAiqAAQoLZVRhbGtTdGF0dXMSEAoMRVRTX1NUQVJU",
            "X09LEAASFAoQRVRTX1VTRV9CWV9PVEhFUhABEg8KC0VUU19TVE9QX09LEAIS",
            "IQodRVRTX05PX1VTRVJfQ09OTkVDVEVEX1dJVEhfSVAQAxIVChFFVFNfVU5L",
            "Tk9XTl9FUlJPUhAEKjsKC2VQZXJzb25UeXBlEg4KCmVXaGl0ZUxpc3QQABIO",
            "CgplQmxhY2tMaXN0EAESDAoIZVJlZExpc3QQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DDRCommProto.eCltType), typeof(global::DDRCommProto.eCmdRspType), typeof(global::DDRCommProto.eCmdIPCMode), typeof(global::DDRCommProto.eCmdActionMode), typeof(global::DDRCommProto.eFileTypes), typeof(global::DDRCommProto.ChannelNetworkType), typeof(global::DDRCommProto.ChannelStreamType), typeof(global::DDRCommProto.eTalkStatus), typeof(global::DDRCommProto.ePersonType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.CommonHeader), global::DDRCommProto.CommonHeader.Parser, new[]{ "BodyType", "FromCltType", "ToCltType", "PassNodeArray", "FlowDirection" }, null, new[]{ typeof(global::DDRCommProto.CommonHeader.Types.eFlowDir) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.CommonHeader.Types.PassNode), global::DDRCommProto.CommonHeader.Types.PassNode.Parser, new[]{ "NodeType", "ReceiveSessionID", "IntptrData", "FromIP" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.HeartBeat), global::DDRCommProto.HeartBeat.Parser, new[]{ "Whatever" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRemoteServerList), global::DDRCommProto.reqRemoteServerList.Parser, new[]{ "Fromip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteServerList), global::DDRCommProto.rspRemoteServerList.Parser, new[]{ "Servers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteServerList.Types.RemoteServer), global::DDRCommProto.rspRemoteServerList.Types.RemoteServer.Parser, new[]{ "Name", "Ip", "Port" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRegisteLS), global::DDRCommProto.reqRegisteLS.Parser, new[]{ "Udid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRegisteLS), global::DDRCommProto.rspRegisteLS.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRemoteLogin), global::DDRCommProto.reqRemoteLogin.Parser, new[]{ "Type", "Username", "Userpwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteLogin), global::DDRCommProto.rspRemoteLogin.Parser, new[]{ "Lslist", "Retcode", "YourRole" }, null, new[]{ typeof(global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteLogin.Types.LSEntity), global::DDRCommProto.rspRemoteLogin.Types.LSEntity.Parser, new[]{ "Udid", "Name" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqSelectLS), global::DDRCommProto.reqSelectLS.Parser, new[]{ "Udid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspSelectLS), global::DDRCommProto.rspSelectLS.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqUnselectLS), global::DDRCommProto.reqUnselectLS.Parser, new[]{ "Udid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspUnselectLS), global::DDRCommProto.rspUnselectLS.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.bcLSAddr), global::DDRCommProto.bcLSAddr.Parser, new[]{ "LSInfos" }, null, new[]{ typeof(global::DDRCommProto.bcLSAddr.Types.eServiceType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.bcLSAddr.Types.ServerInfo), global::DDRCommProto.bcLSAddr.Types.ServerInfo.Parser, new[]{ "Name", "Stype", "Ips", "Port", "Robotid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqLogin), global::DDRCommProto.reqLogin.Parser, new[]{ "Type", "Username", "Userpwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspLogin), global::DDRCommProto.rspLogin.Parser, new[]{ "Retcode", "YourRole" }, null, new[]{ typeof(global::DDRCommProto.rspLogin.Types.eLoginRetCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdMove), global::DDRCommProto.reqCmdMove.Parser, new[]{ "LineSpeed", "AngulauSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdMove), global::DDRCommProto.rspCmdMove.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdChangeSpeed), global::DDRCommProto.reqCmdChangeSpeed.Parser, new[]{ "AddSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdChangeSpeed), global::DDRCommProto.rspCmdChangeSpeed.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdPauseResume), global::DDRCommProto.reqCmdPauseResume.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdPauseResume), global::DDRCommProto.rspCmdPauseResume.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdIPC), global::DDRCommProto.reqCmdIPC.Parser, new[]{ "Mode", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdIPC), global::DDRCommProto.rspCmdIPC.Parser, new[]{ "Mode", "Type", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdAudio), global::DDRCommProto.reqCmdAudio.Parser, new[]{ "Audiop", "Type", "Audiostr", "Level" }, null, new[]{ typeof(global::DDRCommProto.reqCmdAudio.Types.eAudioMode), typeof(global::DDRCommProto.reqCmdAudio.Types.eAudioOperational) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdAudio), global::DDRCommProto.rspCmdAudio.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdUpdateConfig), global::DDRCommProto.reqCmdUpdateConfig.Parser, new[]{ "Data", "Dataname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdUpdateConfig), global::DDRCommProto.rspCmdUpdateConfig.Parser, new[]{ "Type", "Dataname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdGetConfigdata), global::DDRCommProto.reqCmdGetConfigdata.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdGetConfigdata), global::DDRCommProto.rspCmdGetConfigdata.Parser, new[]{ "Type", "Configdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdSetWorkPath), global::DDRCommProto.reqCmdSetWorkPath.Parser, new[]{ "RouteName", "PathName", "Speed", "WalkStyle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdSetWorkPath), global::DDRCommProto.rspCmdSetWorkPath.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdAutoChat), global::DDRCommProto.reqCmdAutoChat.Parser, new[]{ "Type", "Comnum" }, null, new[]{ typeof(global::DDRCommProto.reqCmdAutoChat.Types.eAutoChatType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdAutoChat), global::DDRCommProto.rspCmdAutoChat.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdGeneralOctree), global::DDRCommProto.reqCmdGeneralOctree.Parser, new[]{ "RouteName", "Type" }, null, new[]{ typeof(global::DDRCommProto.reqCmdGeneralOctree.Types.eOctreeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdGeneralOctree), global::DDRCommProto.rspCmdGeneralOctree.Parser, new[]{ "Type", "Otype" }, null, new[]{ typeof(global::DDRCommProto.rspCmdGeneralOctree.Types.eRspOctreeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdStartActionMode), global::DDRCommProto.reqCmdStartActionMode.Parser, new[]{ "Mode", "RouteName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdStartActionMode), global::DDRCommProto.rspCmdStartActionMode.Parser, new[]{ "Mode", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdEndActionMode), global::DDRCommProto.reqCmdEndActionMode.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdEndActionMode), global::DDRCommProto.rspCmdEndActionMode.Parser, new[]{ "Actionmode", "Type", "RouteName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdDeleteCurrRouteOrPath), global::DDRCommProto.reqCmdDeleteCurrRouteOrPath.Parser, new[]{ "RouteName", "PathName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdDeleteCurrRouteOrPath), global::DDRCommProto.rspCmdDeleteCurrRouteOrPath.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdGetCurrRouteAndPath), global::DDRCommProto.reqCmdGetCurrRouteAndPath.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.RouteData), global::DDRCommProto.RouteData.Parser, new[]{ "RouteName", "PathName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdGetCurrRouteAndPath), global::DDRCommProto.rspCmdGetCurrRouteAndPath.Parser, new[]{ "Type", "RouteData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyBaseStatus), global::DDRCommProto.notifyBaseStatus.Parser, new[]{ "Mode", "Sonmode", "Batt", "Temp", "Hum", "Pm25", "Stopstat", "Funcstat", "Voiceloop", "Currroute", "Currpath", "Currspeed", "Currwalkstyle", "Posx", "Posy", "Posdirection", "Poslinespeed", "Posangulauspeed", "Longitude", "Latitude", "Timestamp", "Thermalmaxx", "Thermalmaxy", "Thermalmaxvalue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.OAInfo), global::DDRCommProto.OAInfo.Parser, new[]{ "Startangle", "Endangle", "Dist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyObsData), global::DDRCommProto.notifyObsData.Parser, new[]{ "Greedred", "Maxdist", "Oastat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAlarmInfo), global::DDRCommProto.notifyAlarmInfo.Parser, new[]{ "Type", "Alarmcontent" }, null, new[]{ typeof(global::DDRCommProto.notifyAlarmInfo.Types.eAlarmType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAlarmNewFace), global::DDRCommProto.notifyAlarmNewFace.Parser, new[]{ "Type", "Name", "Socre", "Prevtime", "Facedecode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.AlarmFirePos), global::DDRCommProto.AlarmFirePos.Parser, new[]{ "Posx", "Posy", "Poswidth", "Posheight", "Maxtem", "Avgtem", "Alarmpointcount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAlarmFire), global::DDRCommProto.notifyAlarmFire.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.chkFileStatus), global::DDRCommProto.chkFileStatus.Parser, new[]{ "FileType", "Filefmt", "Existfiles", "TarServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.ansFileStatus), global::DDRCommProto.ansFileStatus.Parser, new[]{ "FileType", "FileAddrList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyUploadFile), global::DDRCommProto.notifyUploadFile.Parser, new[]{ "HttpAddr", "Filefmt", "Existfiles", "TarServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyUploadFileProgress), global::DDRCommProto.notifyUploadFileProgress.Parser, new[]{ "Progress", "Uploadedfiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqStatus), global::DDRCommProto.reqStatus.Parser, new[]{ "StatusMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqFaceAlarm), global::DDRCommProto.reqFaceAlarm.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqHotAlarm), global::DDRCommProto.reqHotAlarm.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqObsAlarm), global::DDRCommProto.reqObsAlarm.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqTextChat), global::DDRCommProto.reqTextChat.Parser, new[]{ "ChatText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.AVStreamSrcChannel), global::DDRCommProto.AVStreamSrcChannel.Parser, new[]{ "SrcAddr", "SrcPort", "StreamType", "NetworkType", "Rate", "Srcname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqStreamAddr), global::DDRCommProto.reqStreamAddr.Parser, new[]{ "NetworkType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspStreamAddr), global::DDRCommProto.rspStreamAddr.Parser, new[]{ "Channels", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqAudioTalk), global::DDRCommProto.reqAudioTalk.Parser, new[]{ "OpType", "NetType" }, null, new[]{ typeof(global::DDRCommProto.reqAudioTalk.Types.eOpMode), typeof(global::DDRCommProto.reqAudioTalk.Types.eNetType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspAudioTalk), global::DDRCommProto.rspAudioTalk.Parser, new[]{ "Status", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyStreamAddr), global::DDRCommProto.notifyStreamAddr.Parser, new[]{ "Channels", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAlarm), global::DDRCommProto.notifyAlarm.Parser, new[]{ "From", "FromIP", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqFileAddress), global::DDRCommProto.reqFileAddress.Parser, new[]{ "TarServiceType", "FileType", "FileNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspFileAddress), global::DDRCommProto.rspFileAddress.Parser, new[]{ "TarServiceType", "FileType", "FileAddrList", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqRemoteFileAddress), global::DDRCommProto.reqRemoteFileAddress.Parser, new[]{ "TarServiceType", "FileType", "FileNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspRemoteFileAddress), global::DDRCommProto.rspRemoteFileAddress.Parser, new[]{ "TarServiceType", "FileType", "FileAddrList", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.AVChannelConfig), global::DDRCommProto.AVChannelConfig.Parser, new[]{ "Src", "Dst", "StreamType", "NetworkType", "Rate", "Srcname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqStreamServiceInfo), global::DDRCommProto.reqStreamServiceInfo.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspStreamServiceInfo), global::DDRCommProto.rspStreamServiceInfo.Parser, new[]{ "TcpPort", "Channels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyStreamServiceInfoChanged), global::DDRCommProto.notifyStreamServiceInfoChanged.Parser, new[]{ "Channels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqStreamRelayAlarm), global::DDRCommProto.reqStreamRelayAlarm.Parser, new[]{ "Error", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.ThermalServerConfig), global::DDRCommProto.ThermalServerConfig.Parser, new[]{ "AlarmTemp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdGetThermalParams), global::DDRCommProto.reqCmdGetThermalParams.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdGetThermalParams), global::DDRCommProto.rspCmdGetThermalParams.Parser, new[]{ "ThermalConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdSetThermalParams), global::DDRCommProto.reqCmdSetThermalParams.Parser, new[]{ "ThermalConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdSetThermalParams), global::DDRCommProto.rspCmdSetThermalParams.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdAddFace), global::DDRCommProto.reqCmdAddFace.Parser, new[]{ "Name", "Type", "Picdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdAddFace), global::DDRCommProto.rspCmdAddFace.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdFaceDataBaseOrder), global::DDRCommProto.reqCmdFaceDataBaseOrder.Parser, new[]{ "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.FaceDataBaseData), global::DDRCommProto.FaceDataBaseData.Parser, new[]{ "Id", "Name", "Type", "Label" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdFaceDataBaseOrder), global::DDRCommProto.rspCmdFaceDataBaseOrder.Parser, new[]{ "Type", "Data" }, null, new[]{ typeof(global::DDRCommProto.rspCmdFaceDataBaseOrder.Types.eRspDataBaseType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.FaceServerConfig), global::DDRCommProto.FaceServerConfig.Parser, new[]{ "Confidence", "FaceQuality" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdGetFaceParams), global::DDRCommProto.reqCmdGetFaceParams.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdGetFaceParams), global::DDRCommProto.rspCmdGetFaceParams.Parser, new[]{ "FaceConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmdSetFaceParams), global::DDRCommProto.reqCmdSetFaceParams.Parser, new[]{ "FaceConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.rspCmdSetFaceParams), global::DDRCommProto.rspCmdSetFaceParams.Parser, new[]{ "Type" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///bit mask: 0x01 0x02 0x04 0x08 0x10 0x20 0x40 0x80...
  /// </summary>
  public enum eCltType {
    [pbr::OriginalName("eNull")] ENull = 0,
    [pbr::OriginalName("eLocalPCClient")] ELocalPcclient = 1,
    [pbr::OriginalName("eLocalAndroidClient")] ELocalAndroidClient = 2,
    [pbr::OriginalName("eRemotePCClient")] ERemotePcclient = 4,
    [pbr::OriginalName("eRemoteAndroidClient")] ERemoteAndroidClient = 8,
    [pbr::OriginalName("eAllClient")] EAllClient = 255,
    [pbr::OriginalName("eLSMStreamRelay")] ELsmstreamRelay = 256,
    [pbr::OriginalName("eLSMSlamNavigation")] ELsmslamNavigation = 512,
    [pbr::OriginalName("eLSMFaceRecognition")] ELsmfaceRecognition = 1024,
    [pbr::OriginalName("eLSMThermalImaging")] ELsmthermalImaging = 2048,
    [pbr::OriginalName("eAllLSM")] EAllLsm = 65280,
    [pbr::OriginalName("eLocalServer")] ELocalServer = 65536,
    [pbr::OriginalName("eRemoteServer")] ERemoteServer = 131072,
    [pbr::OriginalName("eAllServer")] EAllServer = 16711680,
  }

  /// <summary>
  ///-----------------------------------ClientCmd[[[[[
  /// </summary>
  public enum eCmdRspType {
    /// <summary>
    /// Cmd success
    /// </summary>
    [pbr::OriginalName("eSuccess")] ESuccess = 0,
    /// <summary>
    /// Cmd failed
    /// </summary>
    [pbr::OriginalName("eCmdFailed")] ECmdFailed = 1,
    /// <summary>
    /// user no authority
    /// </summary>
    [pbr::OriginalName("eNoAuthority")] ENoAuthority = 2,
    /// <summary>
    /// robot no online
    /// </summary>
    [pbr::OriginalName("eRobotNoLogin")] ERobotNoLogin = 3,
    /// <summary>
    /// lsm no online
    /// </summary>
    [pbr::OriginalName("eLSMNoLogin")] ELsmnoLogin = 4,
  }

  /// <summary>
  /// Cmd IPC Shutdown or ReStart or Volume
  /// </summary>
  public enum eCmdIPCMode {
    /// <summary>
    ///	close IPC
    /// </summary>
    [pbr::OriginalName("eShutDown")] EShutDown = 0,
    /// <summary>
    ///	restart IPC
    /// </summary>
    [pbr::OriginalName("eReStart")] EReStart = 1,
    /// <summary>
    ///	change IPC volume
    /// </summary>
    [pbr::OriginalName("eVolume")] EVolume = 2,
  }

  /// <summary>
  /// Cmd change robot runmode
  /// </summary>
  public enum eCmdActionMode {
    [pbr::OriginalName("eAutoDynamic")] EAutoDynamic = 0,
    [pbr::OriginalName("eAutoStatic")] EAutoStatic = 1,
    [pbr::OriginalName("eBlindWaldDynamic")] EBlindWaldDynamic = 2,
    [pbr::OriginalName("eBlindWaldStatic")] EBlindWaldStatic = 3,
    [pbr::OriginalName("eRec")] ERec = 4,
    [pbr::OriginalName("eReCharging")] EReCharging = 5,
  }

  public enum eFileTypes {
    [pbr::OriginalName("FileContents")] FileContents = 0,
    [pbr::OriginalName("FileHttpAddress")] FileHttpAddress = 1,
  }

  public enum ChannelNetworkType {
    [pbr::OriginalName("Local")] Local = 0,
    [pbr::OriginalName("Remote")] Remote = 1,
  }

  public enum ChannelStreamType {
    [pbr::OriginalName("Video")] Video = 0,
    [pbr::OriginalName("Audio")] Audio = 1,
    [pbr::OriginalName("VideoAudio")] VideoAudio = 2,
  }

  public enum eTalkStatus {
    /// <summary>
    ///成功对讲（服务端可接收）
    /// </summary>
    [pbr::OriginalName("ETS_START_OK")] EtsStartOk = 0,
    /// <summary>
    ///被其它客户端占用
    /// </summary>
    [pbr::OriginalName("ETS_USE_BY_OTHER")] EtsUseByOther = 1,
    /// <summary>
    ///成功停止
    /// </summary>
    [pbr::OriginalName("ETS_STOP_OK")] EtsStopOk = 2,
    /// <summary>
    ///流服务没有被相应IP的客户端连接
    /// </summary>
    [pbr::OriginalName("ETS_NO_USER_CONNECTED_WITH_IP")] EtsNoUserConnectedWithIp = 3,
    /// <summary>
    ///末知错误
    /// </summary>
    [pbr::OriginalName("ETS_UNKNOWN_ERROR")] EtsUnknownError = 4,
  }

  /// <summary>
  /// Cmd add face
  /// </summary>
  public enum ePersonType {
    [pbr::OriginalName("eWhiteList")] EWhiteList = 0,
    [pbr::OriginalName("eBlackList")] EBlackList = 1,
    [pbr::OriginalName("eRedList")] ERedList = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CommonHeader : pb::IMessage<CommonHeader> {
    private static readonly pb::MessageParser<CommonHeader> _parser = new pb::MessageParser<CommonHeader>(() => new CommonHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader(CommonHeader other) : this() {
      bodyType_ = other.bodyType_;
      fromCltType_ = other.fromCltType_;
      toCltType_ = other.toCltType_;
      passNodeArray_ = other.passNodeArray_.Clone();
      flowDirection_ = other.flowDirection_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader Clone() {
      return new CommonHeader(this);
    }

    /// <summary>Field number for the "bodyType" field.</summary>
    public const int BodyTypeFieldNumber = 1;
    private string bodyType_ = "";
    /// <summary>
    /// type of message body, e.g., "reqLogin"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BodyType {
      get { return bodyType_; }
      set {
        bodyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromCltType" field.</summary>
    public const int FromCltTypeFieldNumber = 2;
    private global::DDRCommProto.eCltType fromCltType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType FromCltType {
      get { return fromCltType_; }
      set {
        fromCltType_ = value;
      }
    }

    /// <summary>Field number for the "toCltType" field.</summary>
    public const int ToCltTypeFieldNumber = 3;
    private global::DDRCommProto.eCltType toCltType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType ToCltType {
      get { return toCltType_; }
      set {
        toCltType_ = value;
      }
    }

    /// <summary>Field number for the "passNodeArray" field.</summary>
    public const int PassNodeArrayFieldNumber = 4;
    private static readonly pb::FieldCodec<global::DDRCommProto.CommonHeader.Types.PassNode> _repeated_passNodeArray_codec
        = pb::FieldCodec.ForMessage(34, global::DDRCommProto.CommonHeader.Types.PassNode.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.PassNode> passNodeArray_ = new pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.PassNode>();
    /// <summary>
    /// repeated here is to record the route
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.PassNode> PassNodeArray {
      get { return passNodeArray_; }
    }

    /// <summary>Field number for the "flowDirection" field.</summary>
    public const int FlowDirectionFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DDRCommProto.CommonHeader.Types.eFlowDir> _repeated_flowDirection_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::DDRCommProto.CommonHeader.Types.eFlowDir) x);
    private readonly pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir> flowDirection_ = new pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir>();
    /// <summary>
    /// repeated here is to indicate its validity (one and only one flowDirection)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir> FlowDirection {
      get { return flowDirection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BodyType != other.BodyType) return false;
      if (FromCltType != other.FromCltType) return false;
      if (ToCltType != other.ToCltType) return false;
      if(!passNodeArray_.Equals(other.passNodeArray_)) return false;
      if(!flowDirection_.Equals(other.flowDirection_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BodyType.Length != 0) hash ^= BodyType.GetHashCode();
      if (FromCltType != 0) hash ^= FromCltType.GetHashCode();
      if (ToCltType != 0) hash ^= ToCltType.GetHashCode();
      hash ^= passNodeArray_.GetHashCode();
      hash ^= flowDirection_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BodyType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BodyType);
      }
      if (FromCltType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FromCltType);
      }
      if (ToCltType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ToCltType);
      }
      passNodeArray_.WriteTo(output, _repeated_passNodeArray_codec);
      flowDirection_.WriteTo(output, _repeated_flowDirection_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BodyType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BodyType);
      }
      if (FromCltType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FromCltType);
      }
      if (ToCltType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ToCltType);
      }
      size += passNodeArray_.CalculateSize(_repeated_passNodeArray_codec);
      size += flowDirection_.CalculateSize(_repeated_flowDirection_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonHeader other) {
      if (other == null) {
        return;
      }
      if (other.BodyType.Length != 0) {
        BodyType = other.BodyType;
      }
      if (other.FromCltType != 0) {
        FromCltType = other.FromCltType;
      }
      if (other.ToCltType != 0) {
        ToCltType = other.ToCltType;
      }
      passNodeArray_.Add(other.passNodeArray_);
      flowDirection_.Add(other.flowDirection_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BodyType = input.ReadString();
            break;
          }
          case 16: {
            fromCltType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 24: {
            toCltType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 34: {
            passNodeArray_.AddEntriesFrom(input, _repeated_passNodeArray_codec);
            break;
          }
          case 42:
          case 40: {
            flowDirection_.AddEntriesFrom(input, _repeated_flowDirection_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommonHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// flow direction of the immediate transfer
      /// </summary>
      public enum eFlowDir {
        /// <summary>
        ///req is forward ,maybe from client to any service,through center server
        /// </summary>
        [pbr::OriginalName("Forward")] Forward = 0,
        /// <summary>
        ///rsp is backward, maybe from service to client,through center server
        /// </summary>
        [pbr::OriginalName("Backward")] Backward = 1,
        /// <summary>
        ///some sequence msgs need to be use a header to record its route,like  reqFileAddr chkFileStatus ,mannually record passnode in processor
        /// </summary>
        [pbr::OriginalName("RecordInQueue")] RecordInQueue = 2,
        /// <summary>
        ///some sequence msgs to back to the origin use recorded header,like ansFileStatus,rspFileAddr ,mannually use passnode in processor
        /// </summary>
        [pbr::OriginalName("ReturnPopQueue")] ReturnPopQueue = 3,
      }

      public sealed partial class PassNode : pb::IMessage<PassNode> {
        private static readonly pb::MessageParser<PassNode> _parser = new pb::MessageParser<PassNode>(() => new PassNode());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PassNode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.CommonHeader.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PassNode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PassNode(PassNode other) : this() {
          nodeType_ = other.nodeType_;
          receiveSessionID_ = other.receiveSessionID_;
          intptrData_ = other.intptrData_.Clone();
          fromIP_ = other.fromIP_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PassNode Clone() {
          return new PassNode(this);
        }

        /// <summary>Field number for the "nodeType" field.</summary>
        public const int NodeTypeFieldNumber = 1;
        private global::DDRCommProto.eCltType nodeType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DDRCommProto.eCltType NodeType {
          get { return nodeType_; }
          set {
            nodeType_ = value;
          }
        }

        /// <summary>Field number for the "receiveSessionID" field.</summary>
        public const int ReceiveSessionIDFieldNumber = 2;
        private long receiveSessionID_;
        /// <summary>
        ///session shared_ptr value ,the session is which received the message
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ReceiveSessionID {
          get { return receiveSessionID_; }
          set {
            receiveSessionID_ = value;
          }
        }

        /// <summary>Field number for the "IntptrData" field.</summary>
        public const int IntptrDataFieldNumber = 3;
        private static readonly pb::FieldCodec<long> _repeated_intptrData_codec
            = pb::FieldCodec.ForInt64(26);
        private readonly pbc::RepeatedField<long> intptrData_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///store a pointer that to some data structure
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> IntptrData {
          get { return intptrData_; }
        }

        /// <summary>Field number for the "fromIP" field.</summary>
        public const int FromIPFieldNumber = 4;
        private string fromIP_ = "";
        /// <summary>
        ///src IP Address
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FromIP {
          get { return fromIP_; }
          set {
            fromIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PassNode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PassNode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NodeType != other.NodeType) return false;
          if (ReceiveSessionID != other.ReceiveSessionID) return false;
          if(!intptrData_.Equals(other.intptrData_)) return false;
          if (FromIP != other.FromIP) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NodeType != 0) hash ^= NodeType.GetHashCode();
          if (ReceiveSessionID != 0L) hash ^= ReceiveSessionID.GetHashCode();
          hash ^= intptrData_.GetHashCode();
          if (FromIP.Length != 0) hash ^= FromIP.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NodeType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) NodeType);
          }
          if (ReceiveSessionID != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(ReceiveSessionID);
          }
          intptrData_.WriteTo(output, _repeated_intptrData_codec);
          if (FromIP.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(FromIP);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NodeType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeType);
          }
          if (ReceiveSessionID != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveSessionID);
          }
          size += intptrData_.CalculateSize(_repeated_intptrData_codec);
          if (FromIP.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FromIP);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PassNode other) {
          if (other == null) {
            return;
          }
          if (other.NodeType != 0) {
            NodeType = other.NodeType;
          }
          if (other.ReceiveSessionID != 0L) {
            ReceiveSessionID = other.ReceiveSessionID;
          }
          intptrData_.Add(other.intptrData_);
          if (other.FromIP.Length != 0) {
            FromIP = other.FromIP;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                nodeType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
                break;
              }
              case 16: {
                ReceiveSessionID = input.ReadInt64();
                break;
              }
              case 26:
              case 24: {
                intptrData_.AddEntriesFrom(input, _repeated_intptrData_codec);
                break;
              }
              case 34: {
                FromIP = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// ------------------- Common message bodies ------------------- //
  /// </summary>
  public sealed partial class HeartBeat : pb::IMessage<HeartBeat> {
    private static readonly pb::MessageParser<HeartBeat> _parser = new pb::MessageParser<HeartBeat>(() => new HeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat(HeartBeat other) : this() {
      whatever_ = other.whatever_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat Clone() {
      return new HeartBeat(this);
    }

    /// <summary>Field number for the "whatever" field.</summary>
    public const int WhateverFieldNumber = 1;
    private string whatever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Whatever {
      get { return whatever_; }
      set {
        whatever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Whatever != other.Whatever) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Whatever.Length != 0) hash ^= Whatever.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Whatever.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Whatever);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Whatever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Whatever);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Whatever.Length != 0) {
        Whatever = other.Whatever;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Whatever = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///request get remote serverlist , from client or local server to broadcast server
  /// </summary>
  public sealed partial class reqRemoteServerList : pb::IMessage<reqRemoteServerList> {
    private static readonly pb::MessageParser<reqRemoteServerList> _parser = new pb::MessageParser<reqRemoteServerList>(() => new reqRemoteServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRemoteServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteServerList(reqRemoteServerList other) : this() {
      fromip_ = other.fromip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteServerList Clone() {
      return new reqRemoteServerList(this);
    }

    /// <summary>Field number for the "fromip" field.</summary>
    public const int FromipFieldNumber = 1;
    private string fromip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fromip {
      get { return fromip_; }
      set {
        fromip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRemoteServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRemoteServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fromip != other.Fromip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fromip.Length != 0) hash ^= Fromip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fromip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fromip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fromip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fromip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRemoteServerList other) {
      if (other == null) {
        return;
      }
      if (other.Fromip.Length != 0) {
        Fromip = other.Fromip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fromip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRemoteServerList : pb::IMessage<rspRemoteServerList> {
    private static readonly pb::MessageParser<rspRemoteServerList> _parser = new pb::MessageParser<rspRemoteServerList>(() => new rspRemoteServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRemoteServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteServerList(rspRemoteServerList other) : this() {
      servers_ = other.servers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteServerList Clone() {
      return new rspRemoteServerList(this);
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.rspRemoteServerList.Types.RemoteServer.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer> servers_ = new pbc::RepeatedField<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.rspRemoteServerList.Types.RemoteServer> Servers {
      get { return servers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRemoteServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRemoteServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!servers_.Equals(other.servers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= servers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      servers_.WriteTo(output, _repeated_servers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += servers_.CalculateSize(_repeated_servers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRemoteServerList other) {
      if (other == null) {
        return;
      }
      servers_.Add(other.servers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the rspRemoteServerList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RemoteServer : pb::IMessage<RemoteServer> {
        private static readonly pb::MessageParser<RemoteServer> _parser = new pb::MessageParser<RemoteServer>(() => new RemoteServer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoteServer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.rspRemoteServerList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteServer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteServer(RemoteServer other) : this() {
          name_ = other.name_;
          ip_ = other.ip_;
          port_ = other.port_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteServer Clone() {
          return new RemoteServer(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ip" field.</summary>
        public const int IpFieldNumber = 2;
        private string ip_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Ip {
          get { return ip_; }
          set {
            ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 3;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoteServer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoteServer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Ip != other.Ip) return false;
          if (Port != other.Port) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Ip.Length != 0) hash ^= Ip.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Ip.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ip);
          }
          if (Port != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Port);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Ip.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoteServer other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Ip.Length != 0) {
            Ip = other.Ip;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Ip = input.ReadString();
                break;
              }
              case 24: {
                Port = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///register a localserver to a  remote server,ls represent a robot entity. from local server to remote server
  /// </summary>
  public sealed partial class reqRegisteLS : pb::IMessage<reqRegisteLS> {
    private static readonly pb::MessageParser<reqRegisteLS> _parser = new pb::MessageParser<reqRegisteLS>(() => new reqRegisteLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRegisteLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRegisteLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRegisteLS(reqRegisteLS other) : this() {
      udid_ = other.udid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRegisteLS Clone() {
      return new reqRegisteLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRegisteLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRegisteLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRegisteLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRegisteLS : pb::IMessage<rspRegisteLS> {
    private static readonly pb::MessageParser<rspRegisteLS> _parser = new pb::MessageParser<rspRegisteLS>(() => new rspRegisteLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRegisteLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRegisteLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRegisteLS(rspRegisteLS other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRegisteLS Clone() {
      return new rspRegisteLS(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRegisteLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRegisteLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRegisteLS other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///client login to a remote server , from client in internet to remote server
  /// </summary>
  public sealed partial class reqRemoteLogin : pb::IMessage<reqRemoteLogin> {
    private static readonly pb::MessageParser<reqRemoteLogin> _parser = new pb::MessageParser<reqRemoteLogin>(() => new reqRemoteLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRemoteLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteLogin(reqRemoteLogin other) : this() {
      type_ = other.type_;
      username_ = other.username_;
      userpwd_ = other.userpwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteLogin Clone() {
      return new reqRemoteLogin(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCltType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    /// <summary>
    /// nickname for clients/monitors, module name for LSM, ignored for RR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userpwd" field.</summary>
    public const int UserpwdFieldNumber = 3;
    private string userpwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userpwd {
      get { return userpwd_; }
      set {
        userpwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRemoteLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRemoteLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Username != other.Username) return false;
      if (Userpwd != other.Userpwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Userpwd.Length != 0) hash ^= Userpwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Userpwd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Userpwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Userpwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userpwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRemoteLogin other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Userpwd.Length != 0) {
        Userpwd = other.Userpwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Userpwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRemoteLogin : pb::IMessage<rspRemoteLogin> {
    private static readonly pb::MessageParser<rspRemoteLogin> _parser = new pb::MessageParser<rspRemoteLogin>(() => new rspRemoteLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRemoteLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteLogin(rspRemoteLogin other) : this() {
      lslist_ = other.lslist_.Clone();
      retcode_ = other.retcode_;
      yourRole_ = other.yourRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteLogin Clone() {
      return new rspRemoteLogin(this);
    }

    /// <summary>Field number for the "lslist" field.</summary>
    public const int LslistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.rspRemoteLogin.Types.LSEntity> _repeated_lslist_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.rspRemoteLogin.Types.LSEntity.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.rspRemoteLogin.Types.LSEntity> lslist_ = new pbc::RepeatedField<global::DDRCommProto.rspRemoteLogin.Types.LSEntity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.rspRemoteLogin.Types.LSEntity> Lslist {
      get { return lslist_; }
    }

    /// <summary>Field number for the "retcode" field.</summary>
    public const int RetcodeFieldNumber = 2;
    private global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode retcode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode Retcode {
      get { return retcode_; }
      set {
        retcode_ = value;
      }
    }

    /// <summary>Field number for the "yourRole" field.</summary>
    public const int YourRoleFieldNumber = 3;
    private global::DDRCommProto.eCltType yourRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType YourRole {
      get { return yourRole_; }
      set {
        yourRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRemoteLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRemoteLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lslist_.Equals(other.lslist_)) return false;
      if (Retcode != other.Retcode) return false;
      if (YourRole != other.YourRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lslist_.GetHashCode();
      if (Retcode != 0) hash ^= Retcode.GetHashCode();
      if (YourRole != 0) hash ^= YourRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lslist_.WriteTo(output, _repeated_lslist_codec);
      if (Retcode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Retcode);
      }
      if (YourRole != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) YourRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lslist_.CalculateSize(_repeated_lslist_codec);
      if (Retcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Retcode);
      }
      if (YourRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YourRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRemoteLogin other) {
      if (other == null) {
        return;
      }
      lslist_.Add(other.lslist_);
      if (other.Retcode != 0) {
        Retcode = other.Retcode;
      }
      if (other.YourRole != 0) {
        YourRole = other.YourRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lslist_.AddEntriesFrom(input, _repeated_lslist_codec);
            break;
          }
          case 16: {
            retcode_ = (global::DDRCommProto.rspRemoteLogin.Types.eRemoteLoginRetCode) input.ReadEnum();
            break;
          }
          case 24: {
            yourRole_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the rspRemoteLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eRemoteLoginRetCode {
        [pbr::OriginalName("success")] Success = 0,
        [pbr::OriginalName("server_busy")] ServerBusy = 1,
        [pbr::OriginalName("server_limit_reached")] ServerLimitReached = 2,
        [pbr::OriginalName("incorrect_password")] IncorrectPassword = 3,
      }

      public sealed partial class LSEntity : pb::IMessage<LSEntity> {
        private static readonly pb::MessageParser<LSEntity> _parser = new pb::MessageParser<LSEntity>(() => new LSEntity());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LSEntity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.rspRemoteLogin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LSEntity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LSEntity(LSEntity other) : this() {
          udid_ = other.udid_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LSEntity Clone() {
          return new LSEntity(this);
        }

        /// <summary>Field number for the "udid" field.</summary>
        public const int UdidFieldNumber = 1;
        private string udid_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Udid {
          get { return udid_; }
          set {
            udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LSEntity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LSEntity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Udid != other.Udid) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Udid.Length != 0) hash ^= Udid.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Udid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Udid);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Udid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LSEntity other) {
          if (other == null) {
            return;
          }
          if (other.Udid.Length != 0) {
            Udid = other.Udid;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Udid = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///remote client select a local server (a robot) to control or watch
  /// </summary>
  public sealed partial class reqSelectLS : pb::IMessage<reqSelectLS> {
    private static readonly pb::MessageParser<reqSelectLS> _parser = new pb::MessageParser<reqSelectLS>(() => new reqSelectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqSelectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqSelectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqSelectLS(reqSelectLS other) : this() {
      udid_ = other.udid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqSelectLS Clone() {
      return new reqSelectLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqSelectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqSelectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqSelectLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspSelectLS : pb::IMessage<rspSelectLS> {
    private static readonly pb::MessageParser<rspSelectLS> _parser = new pb::MessageParser<rspSelectLS>(() => new rspSelectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspSelectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspSelectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspSelectLS(rspSelectLS other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspSelectLS Clone() {
      return new rspSelectLS(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspSelectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspSelectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspSelectLS other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqUnselectLS : pb::IMessage<reqUnselectLS> {
    private static readonly pb::MessageParser<reqUnselectLS> _parser = new pb::MessageParser<reqUnselectLS>(() => new reqUnselectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqUnselectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqUnselectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqUnselectLS(reqUnselectLS other) : this() {
      udid_ = other.udid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqUnselectLS Clone() {
      return new reqUnselectLS(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqUnselectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqUnselectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqUnselectLS other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspUnselectLS : pb::IMessage<rspUnselectLS> {
    private static readonly pb::MessageParser<rspUnselectLS> _parser = new pb::MessageParser<rspUnselectLS>(() => new rspUnselectLS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspUnselectLS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspUnselectLS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspUnselectLS(rspUnselectLS other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspUnselectLS Clone() {
      return new rspUnselectLS(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspUnselectLS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspUnselectLS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspUnselectLS other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-----------------------------------------------------------------------------------------------------------------Remote Server]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /// </summary>
  public sealed partial class bcLSAddr : pb::IMessage<bcLSAddr> {
    private static readonly pb::MessageParser<bcLSAddr> _parser = new pb::MessageParser<bcLSAddr>(() => new bcLSAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bcLSAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr(bcLSAddr other) : this() {
      lSInfos_ = other.lSInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr Clone() {
      return new bcLSAddr(this);
    }

    /// <summary>Field number for the "LSInfos" field.</summary>
    public const int LSInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.bcLSAddr.Types.ServerInfo> _repeated_lSInfos_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.bcLSAddr.Types.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.bcLSAddr.Types.ServerInfo> lSInfos_ = new pbc::RepeatedField<global::DDRCommProto.bcLSAddr.Types.ServerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.bcLSAddr.Types.ServerInfo> LSInfos {
      get { return lSInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bcLSAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bcLSAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lSInfos_.Equals(other.lSInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lSInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lSInfos_.WriteTo(output, _repeated_lSInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lSInfos_.CalculateSize(_repeated_lSInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bcLSAddr other) {
      if (other == null) {
        return;
      }
      lSInfos_.Add(other.lSInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lSInfos_.AddEntriesFrom(input, _repeated_lSInfos_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the bcLSAddr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eServiceType {
        /// <summary>
        ///Local Server
        /// </summary>
        [pbr::OriginalName("LocalServer")] LocalServer = 0,
        /// <summary>
        ///Remote Server
        /// </summary>
        [pbr::OriginalName("RemoteServer")] RemoteServer = 1,
        /// <summary>
        ///RTSP Stream Server
        /// </summary>
        [pbr::OriginalName("RTSPStreamServer")] RtspstreamServer = 2,
        /// <summary>
        ///Talk Back Server
        /// </summary>
        [pbr::OriginalName("TalkBackServer")] TalkBackServer = 3,
      }

      public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
        private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.bcLSAddr.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInfo(ServerInfo other) : this() {
          name_ = other.name_;
          stype_ = other.stype_;
          ips_ = other.ips_.Clone();
          port_ = other.port_;
          robotid_ = other.robotid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInfo Clone() {
          return new ServerInfo(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stype" field.</summary>
        public const int StypeFieldNumber = 2;
        private global::DDRCommProto.bcLSAddr.Types.eServiceType stype_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DDRCommProto.bcLSAddr.Types.eServiceType Stype {
          get { return stype_; }
          set {
            stype_ = value;
          }
        }

        /// <summary>Field number for the "ips" field.</summary>
        public const int IpsFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_ips_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> ips_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Ips {
          get { return ips_; }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 4;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        /// <summary>Field number for the "robotid" field.</summary>
        public const int RobotidFieldNumber = 5;
        private string robotid_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Robotid {
          get { return robotid_; }
          set {
            robotid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ServerInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServerInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Stype != other.Stype) return false;
          if(!ips_.Equals(other.ips_)) return false;
          if (Port != other.Port) return false;
          if (Robotid != other.Robotid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Stype != 0) hash ^= Stype.GetHashCode();
          hash ^= ips_.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (Robotid.Length != 0) hash ^= Robotid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Stype != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Stype);
          }
          ips_.WriteTo(output, _repeated_ips_codec);
          if (Port != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Port);
          }
          if (Robotid.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Robotid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Stype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stype);
          }
          size += ips_.CalculateSize(_repeated_ips_codec);
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (Robotid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Robotid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServerInfo other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Stype != 0) {
            Stype = other.Stype;
          }
          ips_.Add(other.ips_);
          if (other.Port != 0) {
            Port = other.Port;
          }
          if (other.Robotid.Length != 0) {
            Robotid = other.Robotid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                stype_ = (global::DDRCommProto.bcLSAddr.Types.eServiceType) input.ReadEnum();
                break;
              }
              case 26: {
                ips_.AddEntriesFrom(input, _repeated_ips_codec);
                break;
              }
              case 32: {
                Port = input.ReadInt32();
                break;
              }
              case 42: {
                Robotid = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = UNKNOWN2RS or UNKNOWN2LS
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqLogin : pb::IMessage<reqLogin> {
    private static readonly pb::MessageParser<reqLogin> _parser = new pb::MessageParser<reqLogin>(() => new reqLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin(reqLogin other) : this() {
      type_ = other.type_;
      username_ = other.username_;
      userpwd_ = other.userpwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin Clone() {
      return new reqLogin(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCltType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    /// <summary>
    /// nickname for clients/monitors, module name for LSM, ignored for RR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userpwd" field.</summary>
    public const int UserpwdFieldNumber = 3;
    private string userpwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userpwd {
      get { return userpwd_; }
      set {
        userpwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Username != other.Username) return false;
      if (Userpwd != other.Userpwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Userpwd.Length != 0) hash ^= Userpwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Userpwd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Userpwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Userpwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userpwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqLogin other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Userpwd.Length != 0) {
        Userpwd = other.Userpwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Userpwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = RS2M or RS2RR or LS2C or LS2LSM
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class rspLogin : pb::IMessage<rspLogin> {
    private static readonly pb::MessageParser<rspLogin> _parser = new pb::MessageParser<rspLogin>(() => new rspLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspLogin(rspLogin other) : this() {
      retcode_ = other.retcode_;
      yourRole_ = other.yourRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspLogin Clone() {
      return new rspLogin(this);
    }

    /// <summary>Field number for the "retcode" field.</summary>
    public const int RetcodeFieldNumber = 1;
    private global::DDRCommProto.rspLogin.Types.eLoginRetCode retcode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.rspLogin.Types.eLoginRetCode Retcode {
      get { return retcode_; }
      set {
        retcode_ = value;
      }
    }

    /// <summary>Field number for the "yourRole" field.</summary>
    public const int YourRoleFieldNumber = 2;
    private global::DDRCommProto.eCltType yourRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType YourRole {
      get { return yourRole_; }
      set {
        yourRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Retcode != other.Retcode) return false;
      if (YourRole != other.YourRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Retcode != 0) hash ^= Retcode.GetHashCode();
      if (YourRole != 0) hash ^= YourRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Retcode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Retcode);
      }
      if (YourRole != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) YourRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Retcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Retcode);
      }
      if (YourRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YourRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspLogin other) {
      if (other == null) {
        return;
      }
      if (other.Retcode != 0) {
        Retcode = other.Retcode;
      }
      if (other.YourRole != 0) {
        YourRole = other.YourRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            retcode_ = (global::DDRCommProto.rspLogin.Types.eLoginRetCode) input.ReadEnum();
            break;
          }
          case 16: {
            yourRole_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the rspLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eLoginRetCode {
        [pbr::OriginalName("success")] Success = 0,
        [pbr::OriginalName("server_busy")] ServerBusy = 1,
        [pbr::OriginalName("server_limit_reached")] ServerLimitReached = 2,
        [pbr::OriginalName("incorrect_password")] IncorrectPassword = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Cmd move 
  /// </summary>
  public sealed partial class reqCmdMove : pb::IMessage<reqCmdMove> {
    private static readonly pb::MessageParser<reqCmdMove> _parser = new pb::MessageParser<reqCmdMove>(() => new reqCmdMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdMove(reqCmdMove other) : this() {
      lineSpeed_ = other.lineSpeed_;
      angulauSpeed_ = other.angulauSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdMove Clone() {
      return new reqCmdMove(this);
    }

    /// <summary>Field number for the "line_speed" field.</summary>
    public const int LineSpeedFieldNumber = 1;
    private float lineSpeed_;
    /// <summary>
    /// Cmd Robot forward or back off
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineSpeed {
      get { return lineSpeed_; }
      set {
        lineSpeed_ = value;
      }
    }

    /// <summary>Field number for the "angulau_speed" field.</summary>
    public const int AngulauSpeedFieldNumber = 2;
    private float angulauSpeed_;
    /// <summary>
    /// Cmd Robot turn left or right
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngulauSpeed {
      get { return angulauSpeed_; }
      set {
        angulauSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineSpeed, other.LineSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngulauSpeed, other.AngulauSpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LineSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineSpeed);
      if (AngulauSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngulauSpeed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LineSpeed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(LineSpeed);
      }
      if (AngulauSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AngulauSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LineSpeed != 0F) {
        size += 1 + 4;
      }
      if (AngulauSpeed != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdMove other) {
      if (other == null) {
        return;
      }
      if (other.LineSpeed != 0F) {
        LineSpeed = other.LineSpeed;
      }
      if (other.AngulauSpeed != 0F) {
        AngulauSpeed = other.AngulauSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            LineSpeed = input.ReadFloat();
            break;
          }
          case 21: {
            AngulauSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdMove : pb::IMessage<rspCmdMove> {
    private static readonly pb::MessageParser<rspCmdMove> _parser = new pb::MessageParser<rspCmdMove>(() => new rspCmdMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdMove(rspCmdMove other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdMove Clone() {
      return new rspCmdMove(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdMove other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd change speed
  /// </summary>
  public sealed partial class reqCmdChangeSpeed : pb::IMessage<reqCmdChangeSpeed> {
    private static readonly pb::MessageParser<reqCmdChangeSpeed> _parser = new pb::MessageParser<reqCmdChangeSpeed>(() => new reqCmdChangeSpeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdChangeSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdChangeSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdChangeSpeed(reqCmdChangeSpeed other) : this() {
      addSpeed_ = other.addSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdChangeSpeed Clone() {
      return new reqCmdChangeSpeed(this);
    }

    /// <summary>Field number for the "add_speed" field.</summary>
    public const int AddSpeedFieldNumber = 1;
    private int addSpeed_;
    /// <summary>
    /// Cmd change robot speed of autorun | 0x01 = speed up | 0xff = speed down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddSpeed {
      get { return addSpeed_; }
      set {
        addSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdChangeSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdChangeSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddSpeed != other.AddSpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddSpeed != 0) hash ^= AddSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddSpeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddSpeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdChangeSpeed other) {
      if (other == null) {
        return;
      }
      if (other.AddSpeed != 0) {
        AddSpeed = other.AddSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdChangeSpeed : pb::IMessage<rspCmdChangeSpeed> {
    private static readonly pb::MessageParser<rspCmdChangeSpeed> _parser = new pb::MessageParser<rspCmdChangeSpeed>(() => new rspCmdChangeSpeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdChangeSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdChangeSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdChangeSpeed(rspCmdChangeSpeed other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdChangeSpeed Clone() {
      return new rspCmdChangeSpeed(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdChangeSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdChangeSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdChangeSpeed other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd pause or resume
  /// </summary>
  public sealed partial class reqCmdPauseResume : pb::IMessage<reqCmdPauseResume> {
    private static readonly pb::MessageParser<reqCmdPauseResume> _parser = new pb::MessageParser<reqCmdPauseResume>(() => new reqCmdPauseResume());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdPauseResume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdPauseResume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdPauseResume(reqCmdPauseResume other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdPauseResume Clone() {
      return new reqCmdPauseResume(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    /// <summary>
    /// Cmd robot Pause or Resume of autorun
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdPauseResume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdPauseResume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdPauseResume other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdPauseResume : pb::IMessage<rspCmdPauseResume> {
    private static readonly pb::MessageParser<rspCmdPauseResume> _parser = new pb::MessageParser<rspCmdPauseResume>(() => new rspCmdPauseResume());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdPauseResume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdPauseResume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdPauseResume(rspCmdPauseResume other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdPauseResume Clone() {
      return new rspCmdPauseResume(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdPauseResume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdPauseResume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdPauseResume other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqCmdIPC : pb::IMessage<reqCmdIPC> {
    private static readonly pb::MessageParser<reqCmdIPC> _parser = new pb::MessageParser<reqCmdIPC>(() => new reqCmdIPC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdIPC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdIPC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdIPC(reqCmdIPC other) : this() {
      mode_ = other.mode_;
      values_ = other.values_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdIPC Clone() {
      return new reqCmdIPC(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::DDRCommProto.eCmdIPCMode mode_ = 0;
    /// <summary>
    /// Cmd IPC to Shutdown or ReStart or Volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdIPCMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private int values_;
    /// <summary>
    ///	volume change values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdIPC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdIPC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Values != other.Values) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Values != 0) hash ^= Values.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (Values != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Values);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Values != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Values);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdIPC other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Values != 0) {
        Values = other.Values;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::DDRCommProto.eCmdIPCMode) input.ReadEnum();
            break;
          }
          case 16: {
            Values = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdIPC : pb::IMessage<rspCmdIPC> {
    private static readonly pb::MessageParser<rspCmdIPC> _parser = new pb::MessageParser<rspCmdIPC>(() => new rspCmdIPC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdIPC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdIPC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdIPC(rspCmdIPC other) : this() {
      mode_ = other.mode_;
      type_ = other.type_;
      values_ = other.values_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdIPC Clone() {
      return new rspCmdIPC(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::DDRCommProto.eCmdIPCMode mode_ = 0;
    /// <summary>
    /// IPC implement Shutdown or ReStart or Volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdIPCMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private int values_;
    /// <summary>
    /// Current volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdIPC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdIPC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Type != other.Type) return false;
      if (Values != other.Values) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Values != 0) hash ^= Values.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Values != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Values);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Values != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Values);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdIPC other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Values != 0) {
        Values = other.Values;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::DDRCommProto.eCmdIPCMode) input.ReadEnum();
            break;
          }
          case 16: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
          case 24: {
            Values = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd Robot start or stop play audio
  /// </summary>
  public sealed partial class reqCmdAudio : pb::IMessage<reqCmdAudio> {
    private static readonly pb::MessageParser<reqCmdAudio> _parser = new pb::MessageParser<reqCmdAudio>(() => new reqCmdAudio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdAudio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAudio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAudio(reqCmdAudio other) : this() {
      audiop_ = other.audiop_;
      type_ = other.type_;
      audiostr_ = other.audiostr_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAudio Clone() {
      return new reqCmdAudio(this);
    }

    /// <summary>Field number for the "audiop" field.</summary>
    public const int AudiopFieldNumber = 1;
    private global::DDRCommProto.reqCmdAudio.Types.eAudioOperational audiop_ = 0;
    /// <summary>
    /// Cmd start or stop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqCmdAudio.Types.eAudioOperational Audiop {
      get { return audiop_; }
      set {
        audiop_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::DDRCommProto.reqCmdAudio.Types.eAudioMode type_ = 0;
    /// <summary>
    /// audio play mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqCmdAudio.Types.eAudioMode Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Audiostr" field.</summary>
    public const int AudiostrFieldNumber = 3;
    private pb::ByteString audiostr_ = pb::ByteString.Empty;
    /// <summary>
    /// TTS or File content 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Audiostr {
      get { return audiostr_; }
      set {
        audiostr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// play audio level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdAudio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdAudio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Audiop != other.Audiop) return false;
      if (Type != other.Type) return false;
      if (Audiostr != other.Audiostr) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Audiop != 0) hash ^= Audiop.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Audiostr.Length != 0) hash ^= Audiostr.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Audiop != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Audiop);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Audiostr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Audiostr);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Audiop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Audiop);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Audiostr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Audiostr);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdAudio other) {
      if (other == null) {
        return;
      }
      if (other.Audiop != 0) {
        Audiop = other.Audiop;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Audiostr.Length != 0) {
        Audiostr = other.Audiostr;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            audiop_ = (global::DDRCommProto.reqCmdAudio.Types.eAudioOperational) input.ReadEnum();
            break;
          }
          case 16: {
            type_ = (global::DDRCommProto.reqCmdAudio.Types.eAudioMode) input.ReadEnum();
            break;
          }
          case 26: {
            Audiostr = input.ReadBytes();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqCmdAudio message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eAudioMode {
        /// <summary>
        /// TTS : "helloword"
        /// </summary>
        [pbr::OriginalName("eTTS")] ETts = 0,
        /// <summary>
        /// File : "c:\aaa\bbb\ccc.wav" | "aaa.wav"
        /// </summary>
        [pbr::OriginalName("eFile")] EFile = 1,
      }

      public enum eAudioOperational {
        [pbr::OriginalName("eStart")] EStart = 0,
        [pbr::OriginalName("eStop")] EStop = 1,
      }

    }
    #endregion

  }

  public sealed partial class rspCmdAudio : pb::IMessage<rspCmdAudio> {
    private static readonly pb::MessageParser<rspCmdAudio> _parser = new pb::MessageParser<rspCmdAudio>(() => new rspCmdAudio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdAudio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAudio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAudio(rspCmdAudio other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAudio Clone() {
      return new rspCmdAudio(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdAudio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdAudio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdAudio other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd update config
  /// </summary>
  public sealed partial class reqCmdUpdateConfig : pb::IMessage<reqCmdUpdateConfig> {
    private static readonly pb::MessageParser<reqCmdUpdateConfig> _parser = new pb::MessageParser<reqCmdUpdateConfig>(() => new reqCmdUpdateConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdUpdateConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdUpdateConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdUpdateConfig(reqCmdUpdateConfig other) : this() {
      data_ = other.data_;
      dataname_ = other.dataname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdUpdateConfig Clone() {
      return new reqCmdUpdateConfig(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    /// <summary>
    /// config.dat change cmd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataname" field.</summary>
    public const int DatanameFieldNumber = 2;
    private string dataname_ = "";
    /// <summary>
    /// change dataname
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dataname {
      get { return dataname_; }
      set {
        dataname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdUpdateConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdUpdateConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Dataname != other.Dataname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Dataname.Length != 0) hash ^= Dataname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (Dataname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dataname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Dataname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dataname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdUpdateConfig other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Dataname.Length != 0) {
        Dataname = other.Dataname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
          case 18: {
            Dataname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdUpdateConfig : pb::IMessage<rspCmdUpdateConfig> {
    private static readonly pb::MessageParser<rspCmdUpdateConfig> _parser = new pb::MessageParser<rspCmdUpdateConfig>(() => new rspCmdUpdateConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdUpdateConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdUpdateConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdUpdateConfig(rspCmdUpdateConfig other) : this() {
      type_ = other.type_;
      dataname_ = other.dataname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdUpdateConfig Clone() {
      return new rspCmdUpdateConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "dataname" field.</summary>
    public const int DatanameFieldNumber = 2;
    private string dataname_ = "";
    /// <summary>
    /// change dataname
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dataname {
      get { return dataname_; }
      set {
        dataname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdUpdateConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdUpdateConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Dataname != other.Dataname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Dataname.Length != 0) hash ^= Dataname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Dataname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dataname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Dataname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dataname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdUpdateConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Dataname.Length != 0) {
        Dataname = other.Dataname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
          case 18: {
            Dataname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd get configdata
  /// </summary>
  public sealed partial class reqCmdGetConfigdata : pb::IMessage<reqCmdGetConfigdata> {
    private static readonly pb::MessageParser<reqCmdGetConfigdata> _parser = new pb::MessageParser<reqCmdGetConfigdata>(() => new reqCmdGetConfigdata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdGetConfigdata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetConfigdata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetConfigdata(reqCmdGetConfigdata other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetConfigdata Clone() {
      return new reqCmdGetConfigdata(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdGetConfigdata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdGetConfigdata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdGetConfigdata other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdGetConfigdata : pb::IMessage<rspCmdGetConfigdata> {
    private static readonly pb::MessageParser<rspCmdGetConfigdata> _parser = new pb::MessageParser<rspCmdGetConfigdata>(() => new rspCmdGetConfigdata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdGetConfigdata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetConfigdata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetConfigdata(rspCmdGetConfigdata other) : this() {
      type_ = other.type_;
      configdata_ = other.configdata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetConfigdata Clone() {
      return new rspCmdGetConfigdata(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "configdata" field.</summary>
    public const int ConfigdataFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_configdata_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> configdata_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// config.dat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Configdata {
      get { return configdata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdGetConfigdata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdGetConfigdata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!configdata_.Equals(other.configdata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= configdata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      configdata_.WriteTo(output, _repeated_configdata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += configdata_.CalculateSize(_repeated_configdata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdGetConfigdata other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      configdata_.Add(other.configdata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            configdata_.AddEntriesFrom(input, _repeated_configdata_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd set work path
  /// </summary>
  public sealed partial class reqCmdSetWorkPath : pb::IMessage<reqCmdSetWorkPath> {
    private static readonly pb::MessageParser<reqCmdSetWorkPath> _parser = new pb::MessageParser<reqCmdSetWorkPath>(() => new reqCmdSetWorkPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdSetWorkPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetWorkPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetWorkPath(reqCmdSetWorkPath other) : this() {
      routeName_ = other.routeName_;
      pathName_ = other.pathName_;
      speed_ = other.speed_;
      walkStyle_ = other.walkStyle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetWorkPath Clone() {
      return new reqCmdSetWorkPath(this);
    }

    /// <summary>Field number for the "route_name" field.</summary>
    public const int RouteNameFieldNumber = 1;
    private pb::ByteString routeName_ = pb::ByteString.Empty;
    /// <summary>
    /// route_name : OneRoute_XXXXXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RouteName {
      get { return routeName_; }
      set {
        routeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path_name" field.</summary>
    public const int PathNameFieldNumber = 2;
    private string pathName_ = "";
    /// <summary>
    /// path_name : path_auto.txt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathName {
      get { return pathName_; }
      set {
        pathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private float speed_;
    /// <summary>
    /// speed : 0~0.7
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "walk_style" field.</summary>
    public const int WalkStyleFieldNumber = 4;
    private string walkStyle_ = "";
    /// <summary>
    /// walk style. Time to walk, infinite loop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WalkStyle {
      get { return walkStyle_; }
      set {
        walkStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdSetWorkPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdSetWorkPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RouteName != other.RouteName) return false;
      if (PathName != other.PathName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (WalkStyle != other.WalkStyle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RouteName.Length != 0) hash ^= RouteName.GetHashCode();
      if (PathName.Length != 0) hash ^= PathName.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (WalkStyle.Length != 0) hash ^= WalkStyle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RouteName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RouteName);
      }
      if (PathName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PathName);
      }
      if (Speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Speed);
      }
      if (WalkStyle.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WalkStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RouteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouteName);
      }
      if (PathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathName);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (WalkStyle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WalkStyle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdSetWorkPath other) {
      if (other == null) {
        return;
      }
      if (other.RouteName.Length != 0) {
        RouteName = other.RouteName;
      }
      if (other.PathName.Length != 0) {
        PathName = other.PathName;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.WalkStyle.Length != 0) {
        WalkStyle = other.WalkStyle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RouteName = input.ReadBytes();
            break;
          }
          case 18: {
            PathName = input.ReadString();
            break;
          }
          case 29: {
            Speed = input.ReadFloat();
            break;
          }
          case 34: {
            WalkStyle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdSetWorkPath : pb::IMessage<rspCmdSetWorkPath> {
    private static readonly pb::MessageParser<rspCmdSetWorkPath> _parser = new pb::MessageParser<rspCmdSetWorkPath>(() => new rspCmdSetWorkPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdSetWorkPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetWorkPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetWorkPath(rspCmdSetWorkPath other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetWorkPath Clone() {
      return new rspCmdSetWorkPath(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdSetWorkPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdSetWorkPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdSetWorkPath other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd set autochat type
  /// </summary>
  public sealed partial class reqCmdAutoChat : pb::IMessage<reqCmdAutoChat> {
    private static readonly pb::MessageParser<reqCmdAutoChat> _parser = new pb::MessageParser<reqCmdAutoChat>(() => new reqCmdAutoChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdAutoChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAutoChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAutoChat(reqCmdAutoChat other) : this() {
      type_ = other.type_;
      comnum_ = other.comnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAutoChat Clone() {
      return new reqCmdAutoChat(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.reqCmdAutoChat.Types.eAutoChatType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqCmdAutoChat.Types.eAutoChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "comnum" field.</summary>
    public const int ComnumFieldNumber = 2;
    private int comnum_;
    /// <summary>
    /// MIC number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Comnum {
      get { return comnum_; }
      set {
        comnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdAutoChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdAutoChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Comnum != other.Comnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Comnum != 0) hash ^= Comnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Comnum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Comnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Comnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Comnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdAutoChat other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Comnum != 0) {
        Comnum = other.Comnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.reqCmdAutoChat.Types.eAutoChatType) input.ReadEnum();
            break;
          }
          case 16: {
            Comnum = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqCmdAutoChat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eAutoChatType {
        [pbr::OriginalName("eStartOnline")] EStartOnline = 0,
        [pbr::OriginalName("eStartOffline")] EStartOffline = 1,
        [pbr::OriginalName("eStop")] EStop = 2,
      }

    }
    #endregion

  }

  public sealed partial class rspCmdAutoChat : pb::IMessage<rspCmdAutoChat> {
    private static readonly pb::MessageParser<rspCmdAutoChat> _parser = new pb::MessageParser<rspCmdAutoChat>(() => new rspCmdAutoChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdAutoChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAutoChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAutoChat(rspCmdAutoChat other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAutoChat Clone() {
      return new rspCmdAutoChat(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdAutoChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdAutoChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdAutoChat other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd create or query ot
  /// </summary>
  public sealed partial class reqCmdGeneralOctree : pb::IMessage<reqCmdGeneralOctree> {
    private static readonly pb::MessageParser<reqCmdGeneralOctree> _parser = new pb::MessageParser<reqCmdGeneralOctree>(() => new reqCmdGeneralOctree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdGeneralOctree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGeneralOctree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGeneralOctree(reqCmdGeneralOctree other) : this() {
      routeName_ = other.routeName_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGeneralOctree Clone() {
      return new reqCmdGeneralOctree(this);
    }

    /// <summary>Field number for the "route_name" field.</summary>
    public const int RouteNameFieldNumber = 1;
    private pb::ByteString routeName_ = pb::ByteString.Empty;
    /// <summary>
    /// route_name : OneRoute_XXXXXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RouteName {
      get { return routeName_; }
      set {
        routeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::DDRCommProto.reqCmdGeneralOctree.Types.eOctreeType type_ = 0;
    /// <summary>
    /// create or query ot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqCmdGeneralOctree.Types.eOctreeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdGeneralOctree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdGeneralOctree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RouteName != other.RouteName) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RouteName.Length != 0) hash ^= RouteName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RouteName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RouteName);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RouteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouteName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdGeneralOctree other) {
      if (other == null) {
        return;
      }
      if (other.RouteName.Length != 0) {
        RouteName = other.RouteName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RouteName = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::DDRCommProto.reqCmdGeneralOctree.Types.eOctreeType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqCmdGeneralOctree message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eOctreeType {
        [pbr::OriginalName("eCreate")] ECreate = 0,
        [pbr::OriginalName("eQuery")] EQuery = 1,
      }

    }
    #endregion

  }

  public sealed partial class rspCmdGeneralOctree : pb::IMessage<rspCmdGeneralOctree> {
    private static readonly pb::MessageParser<rspCmdGeneralOctree> _parser = new pb::MessageParser<rspCmdGeneralOctree>(() => new rspCmdGeneralOctree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdGeneralOctree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGeneralOctree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGeneralOctree(rspCmdGeneralOctree other) : this() {
      type_ = other.type_;
      otype_ = other.otype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGeneralOctree Clone() {
      return new rspCmdGeneralOctree(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "otype" field.</summary>
    public const int OtypeFieldNumber = 2;
    private global::DDRCommProto.rspCmdGeneralOctree.Types.eRspOctreeType otype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.rspCmdGeneralOctree.Types.eRspOctreeType Otype {
      get { return otype_; }
      set {
        otype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdGeneralOctree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdGeneralOctree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Otype != other.Otype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Otype != 0) hash ^= Otype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Otype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Otype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Otype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdGeneralOctree other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Otype != 0) {
        Otype = other.Otype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
          case 16: {
            otype_ = (global::DDRCommProto.rspCmdGeneralOctree.Types.eRspOctreeType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the rspCmdGeneralOctree message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eRspOctreeType {
        [pbr::OriginalName("eFileNotExists")] EFileNotExists = 0,
        [pbr::OriginalName("eFileExists")] EFileExists = 1,
        [pbr::OriginalName("eInCreate")] EInCreate = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Cmd start to autorun or rec
  /// </summary>
  public sealed partial class reqCmdStartActionMode : pb::IMessage<reqCmdStartActionMode> {
    private static readonly pb::MessageParser<reqCmdStartActionMode> _parser = new pb::MessageParser<reqCmdStartActionMode>(() => new reqCmdStartActionMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdStartActionMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdStartActionMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdStartActionMode(reqCmdStartActionMode other) : this() {
      mode_ = other.mode_;
      routeName_ = other.routeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdStartActionMode Clone() {
      return new reqCmdStartActionMode(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::DDRCommProto.eCmdActionMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdActionMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "route_name" field.</summary>
    public const int RouteNameFieldNumber = 2;
    private pb::ByteString routeName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RouteName {
      get { return routeName_; }
      set {
        routeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdStartActionMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdStartActionMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (RouteName != other.RouteName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (RouteName.Length != 0) hash ^= RouteName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (RouteName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RouteName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (RouteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouteName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdStartActionMode other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.RouteName.Length != 0) {
        RouteName = other.RouteName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::DDRCommProto.eCmdActionMode) input.ReadEnum();
            break;
          }
          case 18: {
            RouteName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdStartActionMode : pb::IMessage<rspCmdStartActionMode> {
    private static readonly pb::MessageParser<rspCmdStartActionMode> _parser = new pb::MessageParser<rspCmdStartActionMode>(() => new rspCmdStartActionMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdStartActionMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdStartActionMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdStartActionMode(rspCmdStartActionMode other) : this() {
      mode_ = other.mode_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdStartActionMode Clone() {
      return new rspCmdStartActionMode(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::DDRCommProto.eCmdActionMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdActionMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdStartActionMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdStartActionMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdStartActionMode other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::DDRCommProto.eCmdActionMode) input.ReadEnum();
            break;
          }
          case 16: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd stop autorun or out rec
  /// </summary>
  public sealed partial class reqCmdEndActionMode : pb::IMessage<reqCmdEndActionMode> {
    private static readonly pb::MessageParser<reqCmdEndActionMode> _parser = new pb::MessageParser<reqCmdEndActionMode>(() => new reqCmdEndActionMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdEndActionMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdEndActionMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdEndActionMode(reqCmdEndActionMode other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdEndActionMode Clone() {
      return new reqCmdEndActionMode(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdEndActionMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdEndActionMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdEndActionMode other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdEndActionMode : pb::IMessage<rspCmdEndActionMode> {
    private static readonly pb::MessageParser<rspCmdEndActionMode> _parser = new pb::MessageParser<rspCmdEndActionMode>(() => new rspCmdEndActionMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdEndActionMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdEndActionMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdEndActionMode(rspCmdEndActionMode other) : this() {
      actionmode_ = other.actionmode_;
      type_ = other.type_;
      routeName_ = other.routeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdEndActionMode Clone() {
      return new rspCmdEndActionMode(this);
    }

    /// <summary>Field number for the "actionmode" field.</summary>
    public const int ActionmodeFieldNumber = 1;
    private global::DDRCommProto.eCmdActionMode actionmode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdActionMode Actionmode {
      get { return actionmode_; }
      set {
        actionmode_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "route_name" field.</summary>
    public const int RouteNameFieldNumber = 3;
    private pb::ByteString routeName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RouteName {
      get { return routeName_; }
      set {
        routeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdEndActionMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdEndActionMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Actionmode != other.Actionmode) return false;
      if (Type != other.Type) return false;
      if (RouteName != other.RouteName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Actionmode != 0) hash ^= Actionmode.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (RouteName.Length != 0) hash ^= RouteName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Actionmode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Actionmode);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (RouteName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RouteName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Actionmode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Actionmode);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (RouteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouteName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdEndActionMode other) {
      if (other == null) {
        return;
      }
      if (other.Actionmode != 0) {
        Actionmode = other.Actionmode;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.RouteName.Length != 0) {
        RouteName = other.RouteName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            actionmode_ = (global::DDRCommProto.eCmdActionMode) input.ReadEnum();
            break;
          }
          case 16: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
          case 26: {
            RouteName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd Delete curr route data
  /// </summary>
  public sealed partial class reqCmdDeleteCurrRouteOrPath : pb::IMessage<reqCmdDeleteCurrRouteOrPath> {
    private static readonly pb::MessageParser<reqCmdDeleteCurrRouteOrPath> _parser = new pb::MessageParser<reqCmdDeleteCurrRouteOrPath>(() => new reqCmdDeleteCurrRouteOrPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdDeleteCurrRouteOrPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdDeleteCurrRouteOrPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdDeleteCurrRouteOrPath(reqCmdDeleteCurrRouteOrPath other) : this() {
      routeName_ = other.routeName_;
      pathName_ = other.pathName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdDeleteCurrRouteOrPath Clone() {
      return new reqCmdDeleteCurrRouteOrPath(this);
    }

    /// <summary>Field number for the "route_name" field.</summary>
    public const int RouteNameFieldNumber = 1;
    private pb::ByteString routeName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RouteName {
      get { return routeName_; }
      set {
        routeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path_name" field.</summary>
    public const int PathNameFieldNumber = 2;
    private pb::ByteString pathName_ = pb::ByteString.Empty;
    /// <summary>
    /// if path_name is null. delete curr route floder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PathName {
      get { return pathName_; }
      set {
        pathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdDeleteCurrRouteOrPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdDeleteCurrRouteOrPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RouteName != other.RouteName) return false;
      if (PathName != other.PathName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RouteName.Length != 0) hash ^= RouteName.GetHashCode();
      if (PathName.Length != 0) hash ^= PathName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RouteName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RouteName);
      }
      if (PathName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PathName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RouteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouteName);
      }
      if (PathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PathName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdDeleteCurrRouteOrPath other) {
      if (other == null) {
        return;
      }
      if (other.RouteName.Length != 0) {
        RouteName = other.RouteName;
      }
      if (other.PathName.Length != 0) {
        PathName = other.PathName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RouteName = input.ReadBytes();
            break;
          }
          case 18: {
            PathName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdDeleteCurrRouteOrPath : pb::IMessage<rspCmdDeleteCurrRouteOrPath> {
    private static readonly pb::MessageParser<rspCmdDeleteCurrRouteOrPath> _parser = new pb::MessageParser<rspCmdDeleteCurrRouteOrPath>(() => new rspCmdDeleteCurrRouteOrPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdDeleteCurrRouteOrPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdDeleteCurrRouteOrPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdDeleteCurrRouteOrPath(rspCmdDeleteCurrRouteOrPath other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdDeleteCurrRouteOrPath Clone() {
      return new rspCmdDeleteCurrRouteOrPath(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdDeleteCurrRouteOrPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdDeleteCurrRouteOrPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdDeleteCurrRouteOrPath other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get curr route or data list
  /// </summary>
  public sealed partial class reqCmdGetCurrRouteAndPath : pb::IMessage<reqCmdGetCurrRouteAndPath> {
    private static readonly pb::MessageParser<reqCmdGetCurrRouteAndPath> _parser = new pb::MessageParser<reqCmdGetCurrRouteAndPath>(() => new reqCmdGetCurrRouteAndPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdGetCurrRouteAndPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetCurrRouteAndPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetCurrRouteAndPath(reqCmdGetCurrRouteAndPath other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetCurrRouteAndPath Clone() {
      return new reqCmdGetCurrRouteAndPath(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdGetCurrRouteAndPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdGetCurrRouteAndPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdGetCurrRouteAndPath other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RouteData : pb::IMessage<RouteData> {
    private static readonly pb::MessageParser<RouteData> _parser = new pb::MessageParser<RouteData>(() => new RouteData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteData(RouteData other) : this() {
      routeName_ = other.routeName_;
      pathName_ = other.pathName_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteData Clone() {
      return new RouteData(this);
    }

    /// <summary>Field number for the "route_name" field.</summary>
    public const int RouteNameFieldNumber = 1;
    private pb::ByteString routeName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RouteName {
      get { return routeName_; }
      set {
        routeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path_name" field.</summary>
    public const int PathNameFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pathName_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> pathName_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> PathName {
      get { return pathName_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RouteName != other.RouteName) return false;
      if(!pathName_.Equals(other.pathName_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RouteName.Length != 0) hash ^= RouteName.GetHashCode();
      hash ^= pathName_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RouteName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RouteName);
      }
      pathName_.WriteTo(output, _repeated_pathName_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RouteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouteName);
      }
      size += pathName_.CalculateSize(_repeated_pathName_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteData other) {
      if (other == null) {
        return;
      }
      if (other.RouteName.Length != 0) {
        RouteName = other.RouteName;
      }
      pathName_.Add(other.pathName_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RouteName = input.ReadBytes();
            break;
          }
          case 18: {
            pathName_.AddEntriesFrom(input, _repeated_pathName_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdGetCurrRouteAndPath : pb::IMessage<rspCmdGetCurrRouteAndPath> {
    private static readonly pb::MessageParser<rspCmdGetCurrRouteAndPath> _parser = new pb::MessageParser<rspCmdGetCurrRouteAndPath>(() => new rspCmdGetCurrRouteAndPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdGetCurrRouteAndPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetCurrRouteAndPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetCurrRouteAndPath(rspCmdGetCurrRouteAndPath other) : this() {
      type_ = other.type_;
      routeData_ = other.routeData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetCurrRouteAndPath Clone() {
      return new rspCmdGetCurrRouteAndPath(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "route_data" field.</summary>
    public const int RouteDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.RouteData> _repeated_routeData_codec
        = pb::FieldCodec.ForMessage(18, global::DDRCommProto.RouteData.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.RouteData> routeData_ = new pbc::RepeatedField<global::DDRCommProto.RouteData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.RouteData> RouteData {
      get { return routeData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdGetCurrRouteAndPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdGetCurrRouteAndPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!routeData_.Equals(other.routeData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= routeData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      routeData_.WriteTo(output, _repeated_routeData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += routeData_.CalculateSize(_repeated_routeData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdGetCurrRouteAndPath other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      routeData_.Add(other.routeData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
          case 18: {
            routeData_.AddEntriesFrom(input, _repeated_routeData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-----------------------------------ClientCmd]]]]]
  ///-----------------------------------ClientStatus[[[[[
  /// BaseStatus
  /// </summary>
  public sealed partial class notifyBaseStatus : pb::IMessage<notifyBaseStatus> {
    private static readonly pb::MessageParser<notifyBaseStatus> _parser = new pb::MessageParser<notifyBaseStatus>(() => new notifyBaseStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyBaseStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyBaseStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyBaseStatus(notifyBaseStatus other) : this() {
      mode_ = other.mode_;
      sonmode_ = other.sonmode_;
      batt_ = other.batt_;
      temp_ = other.temp_;
      hum_ = other.hum_;
      pm25_ = other.pm25_;
      stopstat_ = other.stopstat_;
      funcstat_ = other.funcstat_;
      voiceloop_ = other.voiceloop_;
      currroute_ = other.currroute_;
      currpath_ = other.currpath_;
      currspeed_ = other.currspeed_;
      currwalkstyle_ = other.currwalkstyle_;
      posx_ = other.posx_;
      posy_ = other.posy_;
      posdirection_ = other.posdirection_;
      poslinespeed_ = other.poslinespeed_;
      posangulauspeed_ = other.posangulauspeed_;
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      timestamp_ = other.timestamp_;
      thermalmaxx_ = other.thermalmaxx_;
      thermalmaxy_ = other.thermalmaxy_;
      thermalmaxvalue_ = other.thermalmaxvalue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyBaseStatus Clone() {
      return new notifyBaseStatus(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private int mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "sonmode" field.</summary>
    public const int SonmodeFieldNumber = 2;
    private int sonmode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sonmode {
      get { return sonmode_; }
      set {
        sonmode_ = value;
      }
    }

    /// <summary>Field number for the "batt" field.</summary>
    public const int BattFieldNumber = 3;
    private float batt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Batt {
      get { return batt_; }
      set {
        batt_ = value;
      }
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 4;
    private float temp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Temp {
      get { return temp_; }
      set {
        temp_ = value;
      }
    }

    /// <summary>Field number for the "hum" field.</summary>
    public const int HumFieldNumber = 5;
    private float hum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hum {
      get { return hum_; }
      set {
        hum_ = value;
      }
    }

    /// <summary>Field number for the "pm25" field.</summary>
    public const int Pm25FieldNumber = 6;
    private float pm25_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pm25 {
      get { return pm25_; }
      set {
        pm25_ = value;
      }
    }

    /// <summary>Field number for the "stopstat" field.</summary>
    public const int StopstatFieldNumber = 7;
    private int stopstat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stopstat {
      get { return stopstat_; }
      set {
        stopstat_ = value;
      }
    }

    /// <summary>Field number for the "funcstat" field.</summary>
    public const int FuncstatFieldNumber = 8;
    private long funcstat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Funcstat {
      get { return funcstat_; }
      set {
        funcstat_ = value;
      }
    }

    /// <summary>Field number for the "voiceloop" field.</summary>
    public const int VoiceloopFieldNumber = 9;
    private int voiceloop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Voiceloop {
      get { return voiceloop_; }
      set {
        voiceloop_ = value;
      }
    }

    /// <summary>Field number for the "currroute" field.</summary>
    public const int CurrrouteFieldNumber = 10;
    private pb::ByteString currroute_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Currroute {
      get { return currroute_; }
      set {
        currroute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currpath" field.</summary>
    public const int CurrpathFieldNumber = 11;
    private string currpath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currpath {
      get { return currpath_; }
      set {
        currpath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currspeed" field.</summary>
    public const int CurrspeedFieldNumber = 12;
    private float currspeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Currspeed {
      get { return currspeed_; }
      set {
        currspeed_ = value;
      }
    }

    /// <summary>Field number for the "currwalkstyle" field.</summary>
    public const int CurrwalkstyleFieldNumber = 13;
    private string currwalkstyle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currwalkstyle {
      get { return currwalkstyle_; }
      set {
        currwalkstyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "posx" field.</summary>
    public const int PosxFieldNumber = 14;
    private float posx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Posx {
      get { return posx_; }
      set {
        posx_ = value;
      }
    }

    /// <summary>Field number for the "posy" field.</summary>
    public const int PosyFieldNumber = 15;
    private float posy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Posy {
      get { return posy_; }
      set {
        posy_ = value;
      }
    }

    /// <summary>Field number for the "posdirection" field.</summary>
    public const int PosdirectionFieldNumber = 16;
    private float posdirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Posdirection {
      get { return posdirection_; }
      set {
        posdirection_ = value;
      }
    }

    /// <summary>Field number for the "poslinespeed" field.</summary>
    public const int PoslinespeedFieldNumber = 17;
    private float poslinespeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Poslinespeed {
      get { return poslinespeed_; }
      set {
        poslinespeed_ = value;
      }
    }

    /// <summary>Field number for the "posangulauspeed" field.</summary>
    public const int PosangulauspeedFieldNumber = 18;
    private float posangulauspeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Posangulauspeed {
      get { return posangulauspeed_; }
      set {
        posangulauspeed_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 19;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 20;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 21;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "thermalmaxx" field.</summary>
    public const int ThermalmaxxFieldNumber = 22;
    private int thermalmaxx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Thermalmaxx {
      get { return thermalmaxx_; }
      set {
        thermalmaxx_ = value;
      }
    }

    /// <summary>Field number for the "thermalmaxy" field.</summary>
    public const int ThermalmaxyFieldNumber = 23;
    private int thermalmaxy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Thermalmaxy {
      get { return thermalmaxy_; }
      set {
        thermalmaxy_ = value;
      }
    }

    /// <summary>Field number for the "thermalmaxvalue" field.</summary>
    public const int ThermalmaxvalueFieldNumber = 24;
    private float thermalmaxvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Thermalmaxvalue {
      get { return thermalmaxvalue_; }
      set {
        thermalmaxvalue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyBaseStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyBaseStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Sonmode != other.Sonmode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Batt, other.Batt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temp, other.Temp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hum, other.Hum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pm25, other.Pm25)) return false;
      if (Stopstat != other.Stopstat) return false;
      if (Funcstat != other.Funcstat) return false;
      if (Voiceloop != other.Voiceloop) return false;
      if (Currroute != other.Currroute) return false;
      if (Currpath != other.Currpath) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Currspeed, other.Currspeed)) return false;
      if (Currwalkstyle != other.Currwalkstyle) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Posx, other.Posx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Posy, other.Posy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Posdirection, other.Posdirection)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Poslinespeed, other.Poslinespeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Posangulauspeed, other.Posangulauspeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Thermalmaxx != other.Thermalmaxx) return false;
      if (Thermalmaxy != other.Thermalmaxy) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Thermalmaxvalue, other.Thermalmaxvalue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Sonmode != 0) hash ^= Sonmode.GetHashCode();
      if (Batt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Batt);
      if (Temp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temp);
      if (Hum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hum);
      if (Pm25 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pm25);
      if (Stopstat != 0) hash ^= Stopstat.GetHashCode();
      if (Funcstat != 0L) hash ^= Funcstat.GetHashCode();
      if (Voiceloop != 0) hash ^= Voiceloop.GetHashCode();
      if (Currroute.Length != 0) hash ^= Currroute.GetHashCode();
      if (Currpath.Length != 0) hash ^= Currpath.GetHashCode();
      if (Currspeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Currspeed);
      if (Currwalkstyle.Length != 0) hash ^= Currwalkstyle.GetHashCode();
      if (Posx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Posx);
      if (Posy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Posy);
      if (Posdirection != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Posdirection);
      if (Poslinespeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Poslinespeed);
      if (Posangulauspeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Posangulauspeed);
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Thermalmaxx != 0) hash ^= Thermalmaxx.GetHashCode();
      if (Thermalmaxy != 0) hash ^= Thermalmaxy.GetHashCode();
      if (Thermalmaxvalue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Thermalmaxvalue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mode);
      }
      if (Sonmode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sonmode);
      }
      if (Batt != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Batt);
      }
      if (Temp != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Temp);
      }
      if (Hum != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Hum);
      }
      if (Pm25 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Pm25);
      }
      if (Stopstat != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Stopstat);
      }
      if (Funcstat != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Funcstat);
      }
      if (Voiceloop != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Voiceloop);
      }
      if (Currroute.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Currroute);
      }
      if (Currpath.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Currpath);
      }
      if (Currspeed != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Currspeed);
      }
      if (Currwalkstyle.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Currwalkstyle);
      }
      if (Posx != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Posx);
      }
      if (Posy != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Posy);
      }
      if (Posdirection != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Posdirection);
      }
      if (Poslinespeed != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Poslinespeed);
      }
      if (Posangulauspeed != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Posangulauspeed);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Longitude);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Latitude);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(Timestamp);
      }
      if (Thermalmaxx != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Thermalmaxx);
      }
      if (Thermalmaxy != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Thermalmaxy);
      }
      if (Thermalmaxvalue != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Thermalmaxvalue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (Sonmode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sonmode);
      }
      if (Batt != 0F) {
        size += 1 + 4;
      }
      if (Temp != 0F) {
        size += 1 + 4;
      }
      if (Hum != 0F) {
        size += 1 + 4;
      }
      if (Pm25 != 0F) {
        size += 1 + 4;
      }
      if (Stopstat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stopstat);
      }
      if (Funcstat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Funcstat);
      }
      if (Voiceloop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Voiceloop);
      }
      if (Currroute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Currroute);
      }
      if (Currpath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currpath);
      }
      if (Currspeed != 0F) {
        size += 1 + 4;
      }
      if (Currwalkstyle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currwalkstyle);
      }
      if (Posx != 0F) {
        size += 1 + 4;
      }
      if (Posy != 0F) {
        size += 1 + 4;
      }
      if (Posdirection != 0F) {
        size += 2 + 4;
      }
      if (Poslinespeed != 0F) {
        size += 2 + 4;
      }
      if (Posangulauspeed != 0F) {
        size += 2 + 4;
      }
      if (Longitude != 0D) {
        size += 2 + 8;
      }
      if (Latitude != 0D) {
        size += 2 + 8;
      }
      if (Timestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Thermalmaxx != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Thermalmaxx);
      }
      if (Thermalmaxy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Thermalmaxy);
      }
      if (Thermalmaxvalue != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyBaseStatus other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Sonmode != 0) {
        Sonmode = other.Sonmode;
      }
      if (other.Batt != 0F) {
        Batt = other.Batt;
      }
      if (other.Temp != 0F) {
        Temp = other.Temp;
      }
      if (other.Hum != 0F) {
        Hum = other.Hum;
      }
      if (other.Pm25 != 0F) {
        Pm25 = other.Pm25;
      }
      if (other.Stopstat != 0) {
        Stopstat = other.Stopstat;
      }
      if (other.Funcstat != 0L) {
        Funcstat = other.Funcstat;
      }
      if (other.Voiceloop != 0) {
        Voiceloop = other.Voiceloop;
      }
      if (other.Currroute.Length != 0) {
        Currroute = other.Currroute;
      }
      if (other.Currpath.Length != 0) {
        Currpath = other.Currpath;
      }
      if (other.Currspeed != 0F) {
        Currspeed = other.Currspeed;
      }
      if (other.Currwalkstyle.Length != 0) {
        Currwalkstyle = other.Currwalkstyle;
      }
      if (other.Posx != 0F) {
        Posx = other.Posx;
      }
      if (other.Posy != 0F) {
        Posy = other.Posy;
      }
      if (other.Posdirection != 0F) {
        Posdirection = other.Posdirection;
      }
      if (other.Poslinespeed != 0F) {
        Poslinespeed = other.Poslinespeed;
      }
      if (other.Posangulauspeed != 0F) {
        Posangulauspeed = other.Posangulauspeed;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Thermalmaxx != 0) {
        Thermalmaxx = other.Thermalmaxx;
      }
      if (other.Thermalmaxy != 0) {
        Thermalmaxy = other.Thermalmaxy;
      }
      if (other.Thermalmaxvalue != 0F) {
        Thermalmaxvalue = other.Thermalmaxvalue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = input.ReadInt32();
            break;
          }
          case 16: {
            Sonmode = input.ReadInt32();
            break;
          }
          case 29: {
            Batt = input.ReadFloat();
            break;
          }
          case 37: {
            Temp = input.ReadFloat();
            break;
          }
          case 45: {
            Hum = input.ReadFloat();
            break;
          }
          case 53: {
            Pm25 = input.ReadFloat();
            break;
          }
          case 56: {
            Stopstat = input.ReadInt32();
            break;
          }
          case 64: {
            Funcstat = input.ReadInt64();
            break;
          }
          case 72: {
            Voiceloop = input.ReadInt32();
            break;
          }
          case 82: {
            Currroute = input.ReadBytes();
            break;
          }
          case 90: {
            Currpath = input.ReadString();
            break;
          }
          case 101: {
            Currspeed = input.ReadFloat();
            break;
          }
          case 106: {
            Currwalkstyle = input.ReadString();
            break;
          }
          case 117: {
            Posx = input.ReadFloat();
            break;
          }
          case 125: {
            Posy = input.ReadFloat();
            break;
          }
          case 133: {
            Posdirection = input.ReadFloat();
            break;
          }
          case 141: {
            Poslinespeed = input.ReadFloat();
            break;
          }
          case 149: {
            Posangulauspeed = input.ReadFloat();
            break;
          }
          case 153: {
            Longitude = input.ReadDouble();
            break;
          }
          case 161: {
            Latitude = input.ReadDouble();
            break;
          }
          case 168: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 176: {
            Thermalmaxx = input.ReadInt32();
            break;
          }
          case 184: {
            Thermalmaxy = input.ReadInt32();
            break;
          }
          case 197: {
            Thermalmaxvalue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///ObsStatus
  /// </summary>
  public sealed partial class OAInfo : pb::IMessage<OAInfo> {
    private static readonly pb::MessageParser<OAInfo> _parser = new pb::MessageParser<OAInfo>(() => new OAInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OAInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OAInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OAInfo(OAInfo other) : this() {
      startangle_ = other.startangle_;
      endangle_ = other.endangle_;
      dist_ = other.dist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OAInfo Clone() {
      return new OAInfo(this);
    }

    /// <summary>Field number for the "startangle" field.</summary>
    public const int StartangleFieldNumber = 1;
    private float startangle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Startangle {
      get { return startangle_; }
      set {
        startangle_ = value;
      }
    }

    /// <summary>Field number for the "endangle" field.</summary>
    public const int EndangleFieldNumber = 2;
    private float endangle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Endangle {
      get { return endangle_; }
      set {
        endangle_ = value;
      }
    }

    /// <summary>Field number for the "dist" field.</summary>
    public const int DistFieldNumber = 3;
    private float dist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dist {
      get { return dist_; }
      set {
        dist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OAInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OAInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Startangle, other.Startangle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Endangle, other.Endangle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dist, other.Dist)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Startangle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Startangle);
      if (Endangle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Endangle);
      if (Dist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dist);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Startangle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Startangle);
      }
      if (Endangle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Endangle);
      }
      if (Dist != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Dist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Startangle != 0F) {
        size += 1 + 4;
      }
      if (Endangle != 0F) {
        size += 1 + 4;
      }
      if (Dist != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OAInfo other) {
      if (other == null) {
        return;
      }
      if (other.Startangle != 0F) {
        Startangle = other.Startangle;
      }
      if (other.Endangle != 0F) {
        Endangle = other.Endangle;
      }
      if (other.Dist != 0F) {
        Dist = other.Dist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Startangle = input.ReadFloat();
            break;
          }
          case 21: {
            Endangle = input.ReadFloat();
            break;
          }
          case 29: {
            Dist = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyObsData : pb::IMessage<notifyObsData> {
    private static readonly pb::MessageParser<notifyObsData> _parser = new pb::MessageParser<notifyObsData>(() => new notifyObsData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyObsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyObsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyObsData(notifyObsData other) : this() {
      greedred_ = other.greedred_;
      maxdist_ = other.maxdist_;
      oastat_ = other.oastat_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyObsData Clone() {
      return new notifyObsData(this);
    }

    /// <summary>Field number for the "greedred" field.</summary>
    public const int GreedredFieldNumber = 1;
    private int greedred_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Greedred {
      get { return greedred_; }
      set {
        greedred_ = value;
      }
    }

    /// <summary>Field number for the "maxdist" field.</summary>
    public const int MaxdistFieldNumber = 2;
    private float maxdist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Maxdist {
      get { return maxdist_; }
      set {
        maxdist_ = value;
      }
    }

    /// <summary>Field number for the "oastat" field.</summary>
    public const int OastatFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DDRCommProto.OAInfo> _repeated_oastat_codec
        = pb::FieldCodec.ForMessage(26, global::DDRCommProto.OAInfo.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.OAInfo> oastat_ = new pbc::RepeatedField<global::DDRCommProto.OAInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.OAInfo> Oastat {
      get { return oastat_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyObsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyObsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Greedred != other.Greedred) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Maxdist, other.Maxdist)) return false;
      if(!oastat_.Equals(other.oastat_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Greedred != 0) hash ^= Greedred.GetHashCode();
      if (Maxdist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Maxdist);
      hash ^= oastat_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Greedred != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Greedred);
      }
      if (Maxdist != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Maxdist);
      }
      oastat_.WriteTo(output, _repeated_oastat_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Greedred != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Greedred);
      }
      if (Maxdist != 0F) {
        size += 1 + 4;
      }
      size += oastat_.CalculateSize(_repeated_oastat_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyObsData other) {
      if (other == null) {
        return;
      }
      if (other.Greedred != 0) {
        Greedred = other.Greedred;
      }
      if (other.Maxdist != 0F) {
        Maxdist = other.Maxdist;
      }
      oastat_.Add(other.oastat_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Greedred = input.ReadInt32();
            break;
          }
          case 21: {
            Maxdist = input.ReadFloat();
            break;
          }
          case 26: {
            oastat_.AddEntriesFrom(input, _repeated_oastat_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-----------------------------------ClientAlarm[[[[[
  /// Alarm Thermal or ObsStatus
  /// </summary>
  public sealed partial class notifyAlarmInfo : pb::IMessage<notifyAlarmInfo> {
    private static readonly pb::MessageParser<notifyAlarmInfo> _parser = new pb::MessageParser<notifyAlarmInfo>(() => new notifyAlarmInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyAlarmInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmInfo(notifyAlarmInfo other) : this() {
      type_ = other.type_;
      alarmcontent_ = other.alarmcontent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmInfo Clone() {
      return new notifyAlarmInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.notifyAlarmInfo.Types.eAlarmType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.notifyAlarmInfo.Types.eAlarmType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "alarmcontent" field.</summary>
    public const int AlarmcontentFieldNumber = 2;
    private string alarmcontent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alarmcontent {
      get { return alarmcontent_; }
      set {
        alarmcontent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyAlarmInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyAlarmInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Alarmcontent != other.Alarmcontent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Alarmcontent.Length != 0) hash ^= Alarmcontent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Alarmcontent.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alarmcontent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Alarmcontent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alarmcontent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyAlarmInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Alarmcontent.Length != 0) {
        Alarmcontent = other.Alarmcontent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.notifyAlarmInfo.Types.eAlarmType) input.ReadEnum();
            break;
          }
          case 18: {
            Alarmcontent = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the notifyAlarmInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eAlarmType {
        [pbr::OriginalName("eThermalAlarm")] EThermalAlarm = 0,
        [pbr::OriginalName("eObsStatusAlarm")] EObsStatusAlarm = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Alarm face
  /// </summary>
  public sealed partial class notifyAlarmNewFace : pb::IMessage<notifyAlarmNewFace> {
    private static readonly pb::MessageParser<notifyAlarmNewFace> _parser = new pb::MessageParser<notifyAlarmNewFace>(() => new notifyAlarmNewFace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyAlarmNewFace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmNewFace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmNewFace(notifyAlarmNewFace other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      socre_ = other.socre_;
      prevtime_ = other.prevtime_;
      facedecode_ = other.facedecode_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmNewFace Clone() {
      return new notifyAlarmNewFace(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.ePersonType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ePersonType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "socre" field.</summary>
    public const int SocreFieldNumber = 3;
    private float socre_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Socre {
      get { return socre_; }
      set {
        socre_ = value;
      }
    }

    /// <summary>Field number for the "prevtime" field.</summary>
    public const int PrevtimeFieldNumber = 4;
    private long prevtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Prevtime {
      get { return prevtime_; }
      set {
        prevtime_ = value;
      }
    }

    /// <summary>Field number for the "facedecode" field.</summary>
    public const int FacedecodeFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_facedecode_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> facedecode_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Facedecode {
      get { return facedecode_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyAlarmNewFace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyAlarmNewFace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Socre, other.Socre)) return false;
      if (Prevtime != other.Prevtime) return false;
      if(!facedecode_.Equals(other.facedecode_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Socre != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Socre);
      if (Prevtime != 0L) hash ^= Prevtime.GetHashCode();
      hash ^= facedecode_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Socre != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Socre);
      }
      if (Prevtime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Prevtime);
      }
      facedecode_.WriteTo(output, _repeated_facedecode_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Socre != 0F) {
        size += 1 + 4;
      }
      if (Prevtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Prevtime);
      }
      size += facedecode_.CalculateSize(_repeated_facedecode_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyAlarmNewFace other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Socre != 0F) {
        Socre = other.Socre;
      }
      if (other.Prevtime != 0L) {
        Prevtime = other.Prevtime;
      }
      facedecode_.Add(other.facedecode_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.ePersonType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Socre = input.ReadFloat();
            break;
          }
          case 32: {
            Prevtime = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            facedecode_.AddEntriesFrom(input, _repeated_facedecode_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Alarm Fire
  /// </summary>
  public sealed partial class AlarmFirePos : pb::IMessage<AlarmFirePos> {
    private static readonly pb::MessageParser<AlarmFirePos> _parser = new pb::MessageParser<AlarmFirePos>(() => new AlarmFirePos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlarmFirePos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmFirePos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmFirePos(AlarmFirePos other) : this() {
      posx_ = other.posx_;
      posy_ = other.posy_;
      poswidth_ = other.poswidth_;
      posheight_ = other.posheight_;
      maxtem_ = other.maxtem_;
      avgtem_ = other.avgtem_;
      alarmpointcount_ = other.alarmpointcount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmFirePos Clone() {
      return new AlarmFirePos(this);
    }

    /// <summary>Field number for the "posx" field.</summary>
    public const int PosxFieldNumber = 1;
    private int posx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Posx {
      get { return posx_; }
      set {
        posx_ = value;
      }
    }

    /// <summary>Field number for the "posy" field.</summary>
    public const int PosyFieldNumber = 2;
    private int posy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Posy {
      get { return posy_; }
      set {
        posy_ = value;
      }
    }

    /// <summary>Field number for the "poswidth" field.</summary>
    public const int PoswidthFieldNumber = 3;
    private int poswidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Poswidth {
      get { return poswidth_; }
      set {
        poswidth_ = value;
      }
    }

    /// <summary>Field number for the "posheight" field.</summary>
    public const int PosheightFieldNumber = 4;
    private int posheight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Posheight {
      get { return posheight_; }
      set {
        posheight_ = value;
      }
    }

    /// <summary>Field number for the "maxtem" field.</summary>
    public const int MaxtemFieldNumber = 5;
    private int maxtem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxtem {
      get { return maxtem_; }
      set {
        maxtem_ = value;
      }
    }

    /// <summary>Field number for the "avgtem" field.</summary>
    public const int AvgtemFieldNumber = 6;
    private int avgtem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Avgtem {
      get { return avgtem_; }
      set {
        avgtem_ = value;
      }
    }

    /// <summary>Field number for the "alarmpointcount" field.</summary>
    public const int AlarmpointcountFieldNumber = 7;
    private int alarmpointcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Alarmpointcount {
      get { return alarmpointcount_; }
      set {
        alarmpointcount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlarmFirePos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlarmFirePos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Posx != other.Posx) return false;
      if (Posy != other.Posy) return false;
      if (Poswidth != other.Poswidth) return false;
      if (Posheight != other.Posheight) return false;
      if (Maxtem != other.Maxtem) return false;
      if (Avgtem != other.Avgtem) return false;
      if (Alarmpointcount != other.Alarmpointcount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Posx != 0) hash ^= Posx.GetHashCode();
      if (Posy != 0) hash ^= Posy.GetHashCode();
      if (Poswidth != 0) hash ^= Poswidth.GetHashCode();
      if (Posheight != 0) hash ^= Posheight.GetHashCode();
      if (Maxtem != 0) hash ^= Maxtem.GetHashCode();
      if (Avgtem != 0) hash ^= Avgtem.GetHashCode();
      if (Alarmpointcount != 0) hash ^= Alarmpointcount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Posx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Posx);
      }
      if (Posy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Posy);
      }
      if (Poswidth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Poswidth);
      }
      if (Posheight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Posheight);
      }
      if (Maxtem != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Maxtem);
      }
      if (Avgtem != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Avgtem);
      }
      if (Alarmpointcount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Alarmpointcount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Posx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Posx);
      }
      if (Posy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Posy);
      }
      if (Poswidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Poswidth);
      }
      if (Posheight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Posheight);
      }
      if (Maxtem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxtem);
      }
      if (Avgtem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Avgtem);
      }
      if (Alarmpointcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alarmpointcount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlarmFirePos other) {
      if (other == null) {
        return;
      }
      if (other.Posx != 0) {
        Posx = other.Posx;
      }
      if (other.Posy != 0) {
        Posy = other.Posy;
      }
      if (other.Poswidth != 0) {
        Poswidth = other.Poswidth;
      }
      if (other.Posheight != 0) {
        Posheight = other.Posheight;
      }
      if (other.Maxtem != 0) {
        Maxtem = other.Maxtem;
      }
      if (other.Avgtem != 0) {
        Avgtem = other.Avgtem;
      }
      if (other.Alarmpointcount != 0) {
        Alarmpointcount = other.Alarmpointcount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Posx = input.ReadInt32();
            break;
          }
          case 16: {
            Posy = input.ReadInt32();
            break;
          }
          case 24: {
            Poswidth = input.ReadInt32();
            break;
          }
          case 32: {
            Posheight = input.ReadInt32();
            break;
          }
          case 40: {
            Maxtem = input.ReadInt32();
            break;
          }
          case 48: {
            Avgtem = input.ReadInt32();
            break;
          }
          case 56: {
            Alarmpointcount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyAlarmFire : pb::IMessage<notifyAlarmFire> {
    private static readonly pb::MessageParser<notifyAlarmFire> _parser = new pb::MessageParser<notifyAlarmFire>(() => new notifyAlarmFire());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyAlarmFire> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmFire() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmFire(notifyAlarmFire other) : this() {
      pos_ = other.pos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarmFire Clone() {
      return new notifyAlarmFire(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.AlarmFirePos> _repeated_pos_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.AlarmFirePos.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.AlarmFirePos> pos_ = new pbc::RepeatedField<global::DDRCommProto.AlarmFirePos>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.AlarmFirePos> Pos {
      get { return pos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyAlarmFire);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyAlarmFire other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pos_.Equals(other.pos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pos_.WriteTo(output, _repeated_pos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pos_.CalculateSize(_repeated_pos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyAlarmFire other) {
      if (other == null) {
        return;
      }
      pos_.Add(other.pos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = LS2LSM
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class chkFileStatus : pb::IMessage<chkFileStatus> {
    private static readonly pb::MessageParser<chkFileStatus> _parser = new pb::MessageParser<chkFileStatus>(() => new chkFileStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<chkFileStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chkFileStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chkFileStatus(chkFileStatus other) : this() {
      fileType_ = other.fileType_;
      filefmt_ = other.filefmt_.Clone();
      existfiles_ = other.existfiles_.Clone();
      tarServiceType_ = other.tarServiceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chkFileStatus Clone() {
      return new chkFileStatus(this);
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 1;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "filefmt" field.</summary>
    public const int FilefmtFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_filefmt_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> filefmt_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// wildcards fmt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Filefmt {
      get { return filefmt_; }
    }

    /// <summary>Field number for the "existfiles" field.</summary>
    public const int ExistfilesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_existfiles_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> existfiles_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// relavtive path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Existfiles {
      get { return existfiles_; }
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 4;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as chkFileStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(chkFileStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileType != other.FileType) return false;
      if(!filefmt_.Equals(other.filefmt_)) return false;
      if(!existfiles_.Equals(other.existfiles_)) return false;
      if (TarServiceType != other.TarServiceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= filefmt_.GetHashCode();
      hash ^= existfiles_.GetHashCode();
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FileType);
      }
      filefmt_.WriteTo(output, _repeated_filefmt_codec);
      existfiles_.WriteTo(output, _repeated_existfiles_codec);
      if (TarServiceType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TarServiceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += filefmt_.CalculateSize(_repeated_filefmt_codec);
      size += existfiles_.CalculateSize(_repeated_existfiles_codec);
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(chkFileStatus other) {
      if (other == null) {
        return;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      filefmt_.Add(other.filefmt_);
      existfiles_.Add(other.existfiles_);
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 18: {
            filefmt_.AddEntriesFrom(input, _repeated_filefmt_codec);
            break;
          }
          case 26: {
            existfiles_.AddEntriesFrom(input, _repeated_existfiles_codec);
            break;
          }
          case 32: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = LSM2LS
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class ansFileStatus : pb::IMessage<ansFileStatus> {
    private static readonly pb::MessageParser<ansFileStatus> _parser = new pb::MessageParser<ansFileStatus>(() => new ansFileStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ansFileStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ansFileStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ansFileStatus(ansFileStatus other) : this() {
      fileType_ = other.fileType_;
      fileAddrList_ = other.fileAddrList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ansFileStatus Clone() {
      return new ansFileStatus(this);
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 1;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileAddrList" field.</summary>
    public const int FileAddrListFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileAddrList_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> fileAddrList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// no wildcards
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileAddrList {
      get { return fileAddrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ansFileStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ansFileStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileType != other.FileType) return false;
      if(!fileAddrList_.Equals(other.fileAddrList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileAddrList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FileType);
      }
      fileAddrList_.WriteTo(output, _repeated_fileAddrList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileAddrList_.CalculateSize(_repeated_fileAddrList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ansFileStatus other) {
      if (other == null) {
        return;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileAddrList_.Add(other.fileAddrList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 18: {
            fileAddrList_.AddEntriesFrom(input, _repeated_fileAddrList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///remote server notify localserver --> localhttpserver to upload files
  /// </summary>
  public sealed partial class notifyUploadFile : pb::IMessage<notifyUploadFile> {
    private static readonly pb::MessageParser<notifyUploadFile> _parser = new pb::MessageParser<notifyUploadFile>(() => new notifyUploadFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyUploadFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFile(notifyUploadFile other) : this() {
      httpAddr_ = other.httpAddr_;
      filefmt_ = other.filefmt_.Clone();
      existfiles_ = other.existfiles_.Clone();
      tarServiceType_ = other.tarServiceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFile Clone() {
      return new notifyUploadFile(this);
    }

    /// <summary>Field number for the "httpAddr" field.</summary>
    public const int HttpAddrFieldNumber = 1;
    private string httpAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAddr {
      get { return httpAddr_; }
      set {
        httpAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filefmt" field.</summary>
    public const int FilefmtFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_filefmt_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> filefmt_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// wildcards fmt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Filefmt {
      get { return filefmt_; }
    }

    /// <summary>Field number for the "existfiles" field.</summary>
    public const int ExistfilesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_existfiles_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> existfiles_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// relavtive path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Existfiles {
      get { return existfiles_; }
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 4;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyUploadFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyUploadFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpAddr != other.HttpAddr) return false;
      if(!filefmt_.Equals(other.filefmt_)) return false;
      if(!existfiles_.Equals(other.existfiles_)) return false;
      if (TarServiceType != other.TarServiceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpAddr.Length != 0) hash ^= HttpAddr.GetHashCode();
      hash ^= filefmt_.GetHashCode();
      hash ^= existfiles_.GetHashCode();
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpAddr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HttpAddr);
      }
      filefmt_.WriteTo(output, _repeated_filefmt_codec);
      existfiles_.WriteTo(output, _repeated_existfiles_codec);
      if (TarServiceType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TarServiceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAddr);
      }
      size += filefmt_.CalculateSize(_repeated_filefmt_codec);
      size += existfiles_.CalculateSize(_repeated_existfiles_codec);
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyUploadFile other) {
      if (other == null) {
        return;
      }
      if (other.HttpAddr.Length != 0) {
        HttpAddr = other.HttpAddr;
      }
      filefmt_.Add(other.filefmt_);
      existfiles_.Add(other.existfiles_);
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HttpAddr = input.ReadString();
            break;
          }
          case 18: {
            filefmt_.AddEntriesFrom(input, _repeated_filefmt_codec);
            break;
          }
          case 26: {
            existfiles_.AddEntriesFrom(input, _repeated_existfiles_codec);
            break;
          }
          case 32: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///local server notify remote server
  /// </summary>
  public sealed partial class notifyUploadFileProgress : pb::IMessage<notifyUploadFileProgress> {
    private static readonly pb::MessageParser<notifyUploadFileProgress> _parser = new pb::MessageParser<notifyUploadFileProgress>(() => new notifyUploadFileProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyUploadFileProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFileProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFileProgress(notifyUploadFileProgress other) : this() {
      progress_ = other.progress_;
      uploadedfiles_ = other.uploadedfiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyUploadFileProgress Clone() {
      return new notifyUploadFileProgress(this);
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private float progress_;
    /// <summary>
    ///0-1 ,1 is upload finish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "uploadedfiles" field.</summary>
    public const int UploadedfilesFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_uploadedfiles_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> uploadedfiles_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// relavtive path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Uploadedfiles {
      get { return uploadedfiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyUploadFileProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyUploadFileProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Progress, other.Progress)) return false;
      if(!uploadedfiles_.Equals(other.uploadedfiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Progress);
      hash ^= uploadedfiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Progress);
      }
      uploadedfiles_.WriteTo(output, _repeated_uploadedfiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Progress != 0F) {
        size += 1 + 4;
      }
      size += uploadedfiles_.CalculateSize(_repeated_uploadedfiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyUploadFileProgress other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      uploadedfiles_.Add(other.uploadedfiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Progress = input.ReadFloat();
            break;
          }
          case 18: {
            uploadedfiles_.AddEntriesFrom(input, _repeated_uploadedfiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = LSM2LS or LS2C or RR2RS or RS2M
  /// eSrcCondition = NoCond; forwardType = CltMonAll; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqStatus : pb::IMessage<reqStatus> {
    private static readonly pb::MessageParser<reqStatus> _parser = new pb::MessageParser<reqStatus>(() => new reqStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStatus(reqStatus other) : this() {
      statusMsg_ = other.statusMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStatus Clone() {
      return new reqStatus(this);
    }

    /// <summary>Field number for the "statusMsg" field.</summary>
    public const int StatusMsgFieldNumber = 1;
    private string statusMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMsg {
      get { return statusMsg_; }
      set {
        statusMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusMsg != other.StatusMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusMsg.Length != 0) hash ^= StatusMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatusMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqStatus other) {
      if (other == null) {
        return;
      }
      if (other.StatusMsg.Length != 0) {
        StatusMsg = other.StatusMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatusMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = LSM2LS or LS2C or RR2RS or RS2M
  /// eSrcCondition = NoCond; forwardType = CltMonAll; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqFaceAlarm : pb::IMessage<reqFaceAlarm> {
    private static readonly pb::MessageParser<reqFaceAlarm> _parser = new pb::MessageParser<reqFaceAlarm>(() => new reqFaceAlarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqFaceAlarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFaceAlarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFaceAlarm(reqFaceAlarm other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFaceAlarm Clone() {
      return new reqFaceAlarm(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqFaceAlarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqFaceAlarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqFaceAlarm other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqHotAlarm : pb::IMessage<reqHotAlarm> {
    private static readonly pb::MessageParser<reqHotAlarm> _parser = new pb::MessageParser<reqHotAlarm>(() => new reqHotAlarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqHotAlarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqHotAlarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqHotAlarm(reqHotAlarm other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqHotAlarm Clone() {
      return new reqHotAlarm(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqHotAlarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqHotAlarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqHotAlarm other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqObsAlarm : pb::IMessage<reqObsAlarm> {
    private static readonly pb::MessageParser<reqObsAlarm> _parser = new pb::MessageParser<reqObsAlarm>(() => new reqObsAlarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqObsAlarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqObsAlarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqObsAlarm(reqObsAlarm other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqObsAlarm Clone() {
      return new reqObsAlarm(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqObsAlarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqObsAlarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqObsAlarm other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = C2LS or LS2C or RR2RS or M2RS or RS2M
  /// eSrcCondition = NoCond; forwardType = CltMonAll; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqTextChat : pb::IMessage<reqTextChat> {
    private static readonly pb::MessageParser<reqTextChat> _parser = new pb::MessageParser<reqTextChat>(() => new reqTextChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqTextChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTextChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTextChat(reqTextChat other) : this() {
      chatText_ = other.chatText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTextChat Clone() {
      return new reqTextChat(this);
    }

    /// <summary>Field number for the "chatText" field.</summary>
    public const int ChatTextFieldNumber = 1;
    private string chatText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatText {
      get { return chatText_; }
      set {
        chatText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqTextChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqTextChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatText != other.ChatText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatText.Length != 0) hash ^= ChatText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChatText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqTextChat other) {
      if (other == null) {
        return;
      }
      if (other.ChatText.Length != 0) {
        ChatText = other.ChatText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChatText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----------------------------------------------------------------------------------------------------------PC Android Client[[[[[[
  /// </summary>
  public sealed partial class AVStreamSrcChannel : pb::IMessage<AVStreamSrcChannel> {
    private static readonly pb::MessageParser<AVStreamSrcChannel> _parser = new pb::MessageParser<AVStreamSrcChannel>(() => new AVStreamSrcChannel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVStreamSrcChannel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVStreamSrcChannel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVStreamSrcChannel(AVStreamSrcChannel other) : this() {
      srcAddr_ = other.srcAddr_;
      srcPort_ = other.srcPort_.Clone();
      streamType_ = other.streamType_;
      networkType_ = other.networkType_;
      rate_ = other.rate_;
      srcname_ = other.srcname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVStreamSrcChannel Clone() {
      return new AVStreamSrcChannel(this);
    }

    /// <summary>Field number for the "srcAddr" field.</summary>
    public const int SrcAddrFieldNumber = 1;
    private string srcAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcAddr {
      get { return srcAddr_; }
      set {
        srcAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "srcPort" field.</summary>
    public const int SrcPortFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_srcPort_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> srcPort_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///size = 0 means donot use it 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SrcPort {
      get { return srcPort_; }
    }

    /// <summary>Field number for the "streamType" field.</summary>
    public const int StreamTypeFieldNumber = 3;
    private global::DDRCommProto.ChannelStreamType streamType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ChannelStreamType StreamType {
      get { return streamType_; }
      set {
        streamType_ = value;
      }
    }

    /// <summary>Field number for the "networkType" field.</summary>
    public const int NetworkTypeFieldNumber = 4;
    private global::DDRCommProto.ChannelNetworkType networkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ChannelNetworkType NetworkType {
      get { return networkType_; }
      set {
        networkType_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 5;
    private int rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "srcname" field.</summary>
    public const int SrcnameFieldNumber = 6;
    private pb::ByteString srcname_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Srcname {
      get { return srcname_; }
      set {
        srcname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVStreamSrcChannel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVStreamSrcChannel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcAddr != other.SrcAddr) return false;
      if(!srcPort_.Equals(other.srcPort_)) return false;
      if (StreamType != other.StreamType) return false;
      if (NetworkType != other.NetworkType) return false;
      if (Rate != other.Rate) return false;
      if (Srcname != other.Srcname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcAddr.Length != 0) hash ^= SrcAddr.GetHashCode();
      hash ^= srcPort_.GetHashCode();
      if (StreamType != 0) hash ^= StreamType.GetHashCode();
      if (NetworkType != 0) hash ^= NetworkType.GetHashCode();
      if (Rate != 0) hash ^= Rate.GetHashCode();
      if (Srcname.Length != 0) hash ^= Srcname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcAddr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SrcAddr);
      }
      srcPort_.WriteTo(output, _repeated_srcPort_codec);
      if (StreamType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) StreamType);
      }
      if (NetworkType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) NetworkType);
      }
      if (Rate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rate);
      }
      if (Srcname.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Srcname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcAddr);
      }
      size += srcPort_.CalculateSize(_repeated_srcPort_codec);
      if (StreamType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StreamType);
      }
      if (NetworkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkType);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (Srcname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Srcname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVStreamSrcChannel other) {
      if (other == null) {
        return;
      }
      if (other.SrcAddr.Length != 0) {
        SrcAddr = other.SrcAddr;
      }
      srcPort_.Add(other.srcPort_);
      if (other.StreamType != 0) {
        StreamType = other.StreamType;
      }
      if (other.NetworkType != 0) {
        NetworkType = other.NetworkType;
      }
      if (other.Rate != 0) {
        Rate = other.Rate;
      }
      if (other.Srcname.Length != 0) {
        Srcname = other.Srcname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SrcAddr = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            srcPort_.AddEntriesFrom(input, _repeated_srcPort_codec);
            break;
          }
          case 24: {
            streamType_ = (global::DDRCommProto.ChannelStreamType) input.ReadEnum();
            break;
          }
          case 32: {
            networkType_ = (global::DDRCommProto.ChannelNetworkType) input.ReadEnum();
            break;
          }
          case 40: {
            Rate = input.ReadInt32();
            break;
          }
          case 50: {
            Srcname = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqStreamAddr : pb::IMessage<reqStreamAddr> {
    private static readonly pb::MessageParser<reqStreamAddr> _parser = new pb::MessageParser<reqStreamAddr>(() => new reqStreamAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqStreamAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamAddr(reqStreamAddr other) : this() {
      networkType_ = other.networkType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamAddr Clone() {
      return new reqStreamAddr(this);
    }

    /// <summary>Field number for the "networkType" field.</summary>
    public const int NetworkTypeFieldNumber = 1;
    private global::DDRCommProto.ChannelNetworkType networkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ChannelNetworkType NetworkType {
      get { return networkType_; }
      set {
        networkType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqStreamAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqStreamAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkType != other.NetworkType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetworkType != 0) hash ^= NetworkType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NetworkType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqStreamAddr other) {
      if (other == null) {
        return;
      }
      if (other.NetworkType != 0) {
        NetworkType = other.NetworkType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            networkType_ = (global::DDRCommProto.ChannelNetworkType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspStreamAddr : pb::IMessage<rspStreamAddr> {
    private static readonly pb::MessageParser<rspStreamAddr> _parser = new pb::MessageParser<rspStreamAddr>(() => new rspStreamAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspStreamAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspStreamAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspStreamAddr(rspStreamAddr other) : this() {
      channels_ = other.channels_.Clone();
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspStreamAddr Clone() {
      return new rspStreamAddr(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.AVStreamSrcChannel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.AVStreamSrcChannel.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.AVStreamSrcChannel> channels_ = new pbc::RepeatedField<global::DDRCommProto.AVStreamSrcChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.AVStreamSrcChannel> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspStreamAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspStreamAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspStreamAddr other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqAudioTalk : pb::IMessage<reqAudioTalk> {
    private static readonly pb::MessageParser<reqAudioTalk> _parser = new pb::MessageParser<reqAudioTalk>(() => new reqAudioTalk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqAudioTalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAudioTalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAudioTalk(reqAudioTalk other) : this() {
      opType_ = other.opType_;
      netType_ = other.netType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAudioTalk Clone() {
      return new reqAudioTalk(this);
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private global::DDRCommProto.reqAudioTalk.Types.eOpMode opType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqAudioTalk.Types.eOpMode OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "netType" field.</summary>
    public const int NetTypeFieldNumber = 2;
    private global::DDRCommProto.reqAudioTalk.Types.eNetType netType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqAudioTalk.Types.eNetType NetType {
      get { return netType_; }
      set {
        netType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqAudioTalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqAudioTalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpType != other.OpType) return false;
      if (NetType != other.NetType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpType != 0) hash ^= OpType.GetHashCode();
      if (NetType != 0) hash ^= NetType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OpType);
      }
      if (NetType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpType);
      }
      if (NetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqAudioTalk other) {
      if (other == null) {
        return;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      if (other.NetType != 0) {
        NetType = other.NetType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            opType_ = (global::DDRCommProto.reqAudioTalk.Types.eOpMode) input.ReadEnum();
            break;
          }
          case 16: {
            netType_ = (global::DDRCommProto.reqAudioTalk.Types.eNetType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqAudioTalk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eOpMode {
        [pbr::OriginalName("eStart")] EStart = 0,
        [pbr::OriginalName("eStop")] EStop = 1,
      }

      public enum eNetType {
        [pbr::OriginalName("eLocal")] ELocal = 0,
        [pbr::OriginalName("eRemote")] ERemote = 1,
      }

    }
    #endregion

  }

  public sealed partial class rspAudioTalk : pb::IMessage<rspAudioTalk> {
    private static readonly pb::MessageParser<rspAudioTalk> _parser = new pb::MessageParser<rspAudioTalk>(() => new rspAudioTalk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspAudioTalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspAudioTalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspAudioTalk(rspAudioTalk other) : this() {
      status_ = other.status_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspAudioTalk Clone() {
      return new rspAudioTalk(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::DDRCommProto.eTalkStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eTalkStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspAudioTalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspAudioTalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspAudioTalk other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::DDRCommProto.eTalkStatus) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyStreamAddr : pb::IMessage<notifyStreamAddr> {
    private static readonly pb::MessageParser<notifyStreamAddr> _parser = new pb::MessageParser<notifyStreamAddr>(() => new notifyStreamAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyStreamAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStreamAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStreamAddr(notifyStreamAddr other) : this() {
      channels_ = other.channels_.Clone();
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStreamAddr Clone() {
      return new notifyStreamAddr(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.AVStreamSrcChannel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.AVStreamSrcChannel.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.AVStreamSrcChannel> channels_ = new pbc::RepeatedField<global::DDRCommProto.AVStreamSrcChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.AVStreamSrcChannel> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyStreamAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyStreamAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyStreamAddr other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyAlarm : pb::IMessage<notifyAlarm> {
    private static readonly pb::MessageParser<notifyAlarm> _parser = new pb::MessageParser<notifyAlarm>(() => new notifyAlarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyAlarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarm(notifyAlarm other) : this() {
      from_ = other.from_;
      fromIP_ = other.fromIP_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarm Clone() {
      return new notifyAlarm(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::DDRCommProto.eCltType from_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "fromIP" field.</summary>
    public const int FromIPFieldNumber = 2;
    private string fromIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromIP {
      get { return fromIP_; }
      set {
        fromIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyAlarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyAlarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (FromIP != other.FromIP) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (FromIP.Length != 0) hash ^= FromIP.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) From);
      }
      if (FromIP.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FromIP);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) From);
      }
      if (FromIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromIP);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyAlarm other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.FromIP.Length != 0) {
        FromIP = other.FromIP;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            from_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 18: {
            FromIP = input.ReadString();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///local client req file
  /// </summary>
  public sealed partial class reqFileAddress : pb::IMessage<reqFileAddress> {
    private static readonly pb::MessageParser<reqFileAddress> _parser = new pb::MessageParser<reqFileAddress>(() => new reqFileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqFileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFileAddress(reqFileAddress other) : this() {
      tarServiceType_ = other.tarServiceType_;
      fileType_ = other.fileType_;
      fileNames_ = other.fileNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFileAddress Clone() {
      return new reqFileAddress(this);
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 1;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileNames" field.</summary>
    public const int FileNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileNames_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> fileNames_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// allow wildcards (*,?, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileNames {
      get { return fileNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqFileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqFileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarServiceType != other.TarServiceType) return false;
      if (FileType != other.FileType) return false;
      if(!fileNames_.Equals(other.fileNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TarServiceType);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileNames_.WriteTo(output, _repeated_fileNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileNames_.CalculateSize(_repeated_fileNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqFileAddress other) {
      if (other == null) {
        return;
      }
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileNames_.Add(other.fileNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileNames_.AddEntriesFrom(input, _repeated_fileNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = RR2RS or RS2M or LS2C
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class rspFileAddress : pb::IMessage<rspFileAddress> {
    private static readonly pb::MessageParser<rspFileAddress> _parser = new pb::MessageParser<rspFileAddress>(() => new rspFileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspFileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspFileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspFileAddress(rspFileAddress other) : this() {
      tarServiceType_ = other.tarServiceType_;
      fileType_ = other.fileType_;
      fileAddrList_ = other.fileAddrList_.Clone();
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspFileAddress Clone() {
      return new rspFileAddress(this);
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 1;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileAddrList" field.</summary>
    public const int FileAddrListFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileAddrList_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> fileAddrList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// ignored if fileType!=FileContents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileAddrList {
      get { return fileAddrList_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspFileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspFileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarServiceType != other.TarServiceType) return false;
      if (FileType != other.FileType) return false;
      if(!fileAddrList_.Equals(other.fileAddrList_)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileAddrList_.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TarServiceType);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileAddrList_.WriteTo(output, _repeated_fileAddrList_codec);
      if (Error.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileAddrList_.CalculateSize(_repeated_fileAddrList_codec);
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspFileAddress other) {
      if (other == null) {
        return;
      }
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileAddrList_.Add(other.fileAddrList_);
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileAddrList_.AddEntriesFrom(input, _repeated_fileAddrList_codec);
            break;
          }
          case 34: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///remote client reqfile
  /// </summary>
  public sealed partial class reqRemoteFileAddress : pb::IMessage<reqRemoteFileAddress> {
    private static readonly pb::MessageParser<reqRemoteFileAddress> _parser = new pb::MessageParser<reqRemoteFileAddress>(() => new reqRemoteFileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqRemoteFileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteFileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteFileAddress(reqRemoteFileAddress other) : this() {
      tarServiceType_ = other.tarServiceType_;
      fileType_ = other.fileType_;
      fileNames_ = other.fileNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqRemoteFileAddress Clone() {
      return new reqRemoteFileAddress(this);
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 1;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileNames" field.</summary>
    public const int FileNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileNames_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> fileNames_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// allow wildcards (*,?, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileNames {
      get { return fileNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqRemoteFileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqRemoteFileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarServiceType != other.TarServiceType) return false;
      if (FileType != other.FileType) return false;
      if(!fileNames_.Equals(other.fileNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TarServiceType);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileNames_.WriteTo(output, _repeated_fileNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileNames_.CalculateSize(_repeated_fileNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqRemoteFileAddress other) {
      if (other == null) {
        return;
      }
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileNames_.Add(other.fileNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileNames_.AddEntriesFrom(input, _repeated_fileNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspRemoteFileAddress : pb::IMessage<rspRemoteFileAddress> {
    private static readonly pb::MessageParser<rspRemoteFileAddress> _parser = new pb::MessageParser<rspRemoteFileAddress>(() => new rspRemoteFileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspRemoteFileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteFileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteFileAddress(rspRemoteFileAddress other) : this() {
      tarServiceType_ = other.tarServiceType_;
      fileType_ = other.fileType_;
      fileAddrList_ = other.fileAddrList_.Clone();
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspRemoteFileAddress Clone() {
      return new rspRemoteFileAddress(this);
    }

    /// <summary>Field number for the "tarServiceType" field.</summary>
    public const int TarServiceTypeFieldNumber = 1;
    private global::DDRCommProto.eCltType tarServiceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCltType TarServiceType {
      get { return tarServiceType_; }
      set {
        tarServiceType_ = value;
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileAddrList" field.</summary>
    public const int FileAddrListFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fileAddrList_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> fileAddrList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// ignored if fileType!=FileContents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FileAddrList {
      get { return fileAddrList_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspRemoteFileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspRemoteFileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarServiceType != other.TarServiceType) return false;
      if (FileType != other.FileType) return false;
      if(!fileAddrList_.Equals(other.fileAddrList_)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarServiceType != 0) hash ^= TarServiceType.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileAddrList_.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TarServiceType);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileAddrList_.WriteTo(output, _repeated_fileAddrList_codec);
      if (Error.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TarServiceType);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileAddrList_.CalculateSize(_repeated_fileAddrList_codec);
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspRemoteFileAddress other) {
      if (other == null) {
        return;
      }
      if (other.TarServiceType != 0) {
        TarServiceType = other.TarServiceType;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileAddrList_.Add(other.fileAddrList_);
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            tarServiceType_ = (global::DDRCommProto.eCltType) input.ReadEnum();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileAddrList_.AddEntriesFrom(input, _repeated_fileAddrList_codec);
            break;
          }
          case 34: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----------------------------------------------------------------------------------------------------------StreamRelayService[[[[[[
  /// </summary>
  public sealed partial class AVChannelConfig : pb::IMessage<AVChannelConfig> {
    private static readonly pb::MessageParser<AVChannelConfig> _parser = new pb::MessageParser<AVChannelConfig>(() => new AVChannelConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVChannelConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVChannelConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVChannelConfig(AVChannelConfig other) : this() {
      src_ = other.src_;
      dst_ = other.dst_;
      streamType_ = other.streamType_;
      networkType_ = other.networkType_;
      rate_ = other.rate_;
      srcname_ = other.srcname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVChannelConfig Clone() {
      return new AVChannelConfig(this);
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 1;
    private string src_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Src {
      get { return src_; }
      set {
        src_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dst" field.</summary>
    public const int DstFieldNumber = 2;
    private string dst_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dst {
      get { return dst_; }
      set {
        dst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "streamType" field.</summary>
    public const int StreamTypeFieldNumber = 3;
    private global::DDRCommProto.ChannelStreamType streamType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ChannelStreamType StreamType {
      get { return streamType_; }
      set {
        streamType_ = value;
      }
    }

    /// <summary>Field number for the "networkType" field.</summary>
    public const int NetworkTypeFieldNumber = 4;
    private global::DDRCommProto.ChannelNetworkType networkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ChannelNetworkType NetworkType {
      get { return networkType_; }
      set {
        networkType_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 5;
    private int rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "srcname" field.</summary>
    public const int SrcnameFieldNumber = 6;
    private pb::ByteString srcname_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Srcname {
      get { return srcname_; }
      set {
        srcname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVChannelConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVChannelConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Src != other.Src) return false;
      if (Dst != other.Dst) return false;
      if (StreamType != other.StreamType) return false;
      if (NetworkType != other.NetworkType) return false;
      if (Rate != other.Rate) return false;
      if (Srcname != other.Srcname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Src.Length != 0) hash ^= Src.GetHashCode();
      if (Dst.Length != 0) hash ^= Dst.GetHashCode();
      if (StreamType != 0) hash ^= StreamType.GetHashCode();
      if (NetworkType != 0) hash ^= NetworkType.GetHashCode();
      if (Rate != 0) hash ^= Rate.GetHashCode();
      if (Srcname.Length != 0) hash ^= Srcname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Src.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Src);
      }
      if (Dst.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dst);
      }
      if (StreamType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) StreamType);
      }
      if (NetworkType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) NetworkType);
      }
      if (Rate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rate);
      }
      if (Srcname.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Srcname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Src.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Src);
      }
      if (Dst.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dst);
      }
      if (StreamType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StreamType);
      }
      if (NetworkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkType);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (Srcname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Srcname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVChannelConfig other) {
      if (other == null) {
        return;
      }
      if (other.Src.Length != 0) {
        Src = other.Src;
      }
      if (other.Dst.Length != 0) {
        Dst = other.Dst;
      }
      if (other.StreamType != 0) {
        StreamType = other.StreamType;
      }
      if (other.NetworkType != 0) {
        NetworkType = other.NetworkType;
      }
      if (other.Rate != 0) {
        Rate = other.Rate;
      }
      if (other.Srcname.Length != 0) {
        Srcname = other.Srcname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Src = input.ReadString();
            break;
          }
          case 18: {
            Dst = input.ReadString();
            break;
          }
          case 24: {
            streamType_ = (global::DDRCommProto.ChannelStreamType) input.ReadEnum();
            break;
          }
          case 32: {
            networkType_ = (global::DDRCommProto.ChannelNetworkType) input.ReadEnum();
            break;
          }
          case 40: {
            Rate = input.ReadInt32();
            break;
          }
          case 50: {
            Srcname = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqStreamServiceInfo : pb::IMessage<reqStreamServiceInfo> {
    private static readonly pb::MessageParser<reqStreamServiceInfo> _parser = new pb::MessageParser<reqStreamServiceInfo>(() => new reqStreamServiceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqStreamServiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamServiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamServiceInfo(reqStreamServiceInfo other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamServiceInfo Clone() {
      return new reqStreamServiceInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqStreamServiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqStreamServiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqStreamServiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspStreamServiceInfo : pb::IMessage<rspStreamServiceInfo> {
    private static readonly pb::MessageParser<rspStreamServiceInfo> _parser = new pb::MessageParser<rspStreamServiceInfo>(() => new rspStreamServiceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspStreamServiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspStreamServiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspStreamServiceInfo(rspStreamServiceInfo other) : this() {
      tcpPort_ = other.tcpPort_;
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspStreamServiceInfo Clone() {
      return new rspStreamServiceInfo(this);
    }

    /// <summary>Field number for the "tcpPort" field.</summary>
    public const int TcpPortFieldNumber = 1;
    private int tcpPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TcpPort {
      get { return tcpPort_; }
      set {
        tcpPort_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.AVChannelConfig> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(18, global::DDRCommProto.AVChannelConfig.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.AVChannelConfig> channels_ = new pbc::RepeatedField<global::DDRCommProto.AVChannelConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.AVChannelConfig> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspStreamServiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspStreamServiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TcpPort != other.TcpPort) return false;
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TcpPort != 0) hash ^= TcpPort.GetHashCode();
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TcpPort != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TcpPort);
      }
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TcpPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TcpPort);
      }
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspStreamServiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.TcpPort != 0) {
        TcpPort = other.TcpPort;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TcpPort = input.ReadInt32();
            break;
          }
          case 18: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyStreamServiceInfoChanged : pb::IMessage<notifyStreamServiceInfoChanged> {
    private static readonly pb::MessageParser<notifyStreamServiceInfoChanged> _parser = new pb::MessageParser<notifyStreamServiceInfoChanged>(() => new notifyStreamServiceInfoChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyStreamServiceInfoChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStreamServiceInfoChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStreamServiceInfoChanged(notifyStreamServiceInfoChanged other) : this() {
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStreamServiceInfoChanged Clone() {
      return new notifyStreamServiceInfoChanged(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DDRCommProto.AVChannelConfig> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::DDRCommProto.AVChannelConfig.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.AVChannelConfig> channels_ = new pbc::RepeatedField<global::DDRCommProto.AVChannelConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.AVChannelConfig> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyStreamServiceInfoChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyStreamServiceInfoChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyStreamServiceInfoChanged other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqStreamRelayAlarm : pb::IMessage<reqStreamRelayAlarm> {
    private static readonly pb::MessageParser<reqStreamRelayAlarm> _parser = new pb::MessageParser<reqStreamRelayAlarm>(() => new reqStreamRelayAlarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqStreamRelayAlarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamRelayAlarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamRelayAlarm(reqStreamRelayAlarm other) : this() {
      error_ = other.error_;
      to_ = other.to_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStreamRelayAlarm Clone() {
      return new reqStreamRelayAlarm(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.eCltType> _repeated_to_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::DDRCommProto.eCltType) x);
    private readonly pbc::RepeatedField<global::DDRCommProto.eCltType> to_ = new pbc::RepeatedField<global::DDRCommProto.eCltType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.eCltType> To {
      get { return to_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqStreamRelayAlarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqStreamRelayAlarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if(!to_.Equals(other.to_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= to_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      to_.WriteTo(output, _repeated_to_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += to_.CalculateSize(_repeated_to_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqStreamRelayAlarm other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      to_.Add(other.to_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            to_.AddEntriesFrom(input, _repeated_to_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThermalServerConfig : pb::IMessage<ThermalServerConfig> {
    private static readonly pb::MessageParser<ThermalServerConfig> _parser = new pb::MessageParser<ThermalServerConfig>(() => new ThermalServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThermalServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThermalServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThermalServerConfig(ThermalServerConfig other) : this() {
      alarmTemp_ = other.alarmTemp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThermalServerConfig Clone() {
      return new ThermalServerConfig(this);
    }

    /// <summary>Field number for the "alarm_temp" field.</summary>
    public const int AlarmTempFieldNumber = 1;
    private float alarmTemp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AlarmTemp {
      get { return alarmTemp_; }
      set {
        alarmTemp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThermalServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThermalServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AlarmTemp, other.AlarmTemp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlarmTemp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AlarmTemp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlarmTemp != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AlarmTemp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlarmTemp != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThermalServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.AlarmTemp != 0F) {
        AlarmTemp = other.AlarmTemp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AlarmTemp = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get Thermal server params
  /// </summary>
  public sealed partial class reqCmdGetThermalParams : pb::IMessage<reqCmdGetThermalParams> {
    private static readonly pb::MessageParser<reqCmdGetThermalParams> _parser = new pb::MessageParser<reqCmdGetThermalParams>(() => new reqCmdGetThermalParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdGetThermalParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetThermalParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetThermalParams(reqCmdGetThermalParams other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetThermalParams Clone() {
      return new reqCmdGetThermalParams(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdGetThermalParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdGetThermalParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdGetThermalParams other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdGetThermalParams : pb::IMessage<rspCmdGetThermalParams> {
    private static readonly pb::MessageParser<rspCmdGetThermalParams> _parser = new pb::MessageParser<rspCmdGetThermalParams>(() => new rspCmdGetThermalParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdGetThermalParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetThermalParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetThermalParams(rspCmdGetThermalParams other) : this() {
      thermalConfig_ = other.thermalConfig_ != null ? other.thermalConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetThermalParams Clone() {
      return new rspCmdGetThermalParams(this);
    }

    /// <summary>Field number for the "thermal_config" field.</summary>
    public const int ThermalConfigFieldNumber = 1;
    private global::DDRCommProto.ThermalServerConfig thermalConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ThermalServerConfig ThermalConfig {
      get { return thermalConfig_; }
      set {
        thermalConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdGetThermalParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdGetThermalParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ThermalConfig, other.ThermalConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (thermalConfig_ != null) hash ^= ThermalConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (thermalConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ThermalConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (thermalConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThermalConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdGetThermalParams other) {
      if (other == null) {
        return;
      }
      if (other.thermalConfig_ != null) {
        if (thermalConfig_ == null) {
          thermalConfig_ = new global::DDRCommProto.ThermalServerConfig();
        }
        ThermalConfig.MergeFrom(other.ThermalConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (thermalConfig_ == null) {
              thermalConfig_ = new global::DDRCommProto.ThermalServerConfig();
            }
            input.ReadMessage(thermalConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set Thermal server params
  /// </summary>
  public sealed partial class reqCmdSetThermalParams : pb::IMessage<reqCmdSetThermalParams> {
    private static readonly pb::MessageParser<reqCmdSetThermalParams> _parser = new pb::MessageParser<reqCmdSetThermalParams>(() => new reqCmdSetThermalParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdSetThermalParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetThermalParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetThermalParams(reqCmdSetThermalParams other) : this() {
      thermalConfig_ = other.thermalConfig_ != null ? other.thermalConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetThermalParams Clone() {
      return new reqCmdSetThermalParams(this);
    }

    /// <summary>Field number for the "thermal_config" field.</summary>
    public const int ThermalConfigFieldNumber = 1;
    private global::DDRCommProto.ThermalServerConfig thermalConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ThermalServerConfig ThermalConfig {
      get { return thermalConfig_; }
      set {
        thermalConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdSetThermalParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdSetThermalParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ThermalConfig, other.ThermalConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (thermalConfig_ != null) hash ^= ThermalConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (thermalConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ThermalConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (thermalConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThermalConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdSetThermalParams other) {
      if (other == null) {
        return;
      }
      if (other.thermalConfig_ != null) {
        if (thermalConfig_ == null) {
          thermalConfig_ = new global::DDRCommProto.ThermalServerConfig();
        }
        ThermalConfig.MergeFrom(other.ThermalConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (thermalConfig_ == null) {
              thermalConfig_ = new global::DDRCommProto.ThermalServerConfig();
            }
            input.ReadMessage(thermalConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdSetThermalParams : pb::IMessage<rspCmdSetThermalParams> {
    private static readonly pb::MessageParser<rspCmdSetThermalParams> _parser = new pb::MessageParser<rspCmdSetThermalParams>(() => new rspCmdSetThermalParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdSetThermalParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetThermalParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetThermalParams(rspCmdSetThermalParams other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetThermalParams Clone() {
      return new rspCmdSetThermalParams(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdSetThermalParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdSetThermalParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdSetThermalParams other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqCmdAddFace : pb::IMessage<reqCmdAddFace> {
    private static readonly pb::MessageParser<reqCmdAddFace> _parser = new pb::MessageParser<reqCmdAddFace>(() => new reqCmdAddFace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdAddFace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAddFace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAddFace(reqCmdAddFace other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      picdata_ = other.picdata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdAddFace Clone() {
      return new reqCmdAddFace(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::DDRCommProto.ePersonType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ePersonType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "picdata" field.</summary>
    public const int PicdataFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_picdata_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> picdata_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// face picture data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Picdata {
      get { return picdata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdAddFace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdAddFace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if(!picdata_.Equals(other.picdata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= picdata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      picdata_.WriteTo(output, _repeated_picdata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += picdata_.CalculateSize(_repeated_picdata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdAddFace other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      picdata_.Add(other.picdata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::DDRCommProto.ePersonType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            picdata_.AddEntriesFrom(input, _repeated_picdata_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdAddFace : pb::IMessage<rspCmdAddFace> {
    private static readonly pb::MessageParser<rspCmdAddFace> _parser = new pb::MessageParser<rspCmdAddFace>(() => new rspCmdAddFace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdAddFace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAddFace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAddFace(rspCmdAddFace other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdAddFace Clone() {
      return new rspCmdAddFace(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdAddFace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdAddFace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdAddFace other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cmd operation face database
  /// </summary>
  public sealed partial class reqCmdFaceDataBaseOrder : pb::IMessage<reqCmdFaceDataBaseOrder> {
    private static readonly pb::MessageParser<reqCmdFaceDataBaseOrder> _parser = new pb::MessageParser<reqCmdFaceDataBaseOrder>(() => new reqCmdFaceDataBaseOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdFaceDataBaseOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdFaceDataBaseOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdFaceDataBaseOrder(reqCmdFaceDataBaseOrder other) : this() {
      order_ = other.order_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdFaceDataBaseOrder Clone() {
      return new reqCmdFaceDataBaseOrder(this);
    }

    /// <summary>Field number for the "Order" field.</summary>
    public const int OrderFieldNumber = 1;
    private string order_ = "";
    /// <summary>
    /// Order ： "SELECT COUNT(*) FROM DDRPersonLib;" | "SELECT * FROM DDRPersonLib WHERE PersonIndex = 3;"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Order {
      get { return order_; }
      set {
        order_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdFaceDataBaseOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdFaceDataBaseOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Order != other.Order) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Order.Length != 0) hash ^= Order.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Order.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Order);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Order.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Order);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdFaceDataBaseOrder other) {
      if (other == null) {
        return;
      }
      if (other.Order.Length != 0) {
        Order = other.Order;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Order = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FaceDataBaseData : pb::IMessage<FaceDataBaseData> {
    private static readonly pb::MessageParser<FaceDataBaseData> _parser = new pb::MessageParser<FaceDataBaseData>(() => new FaceDataBaseData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceDataBaseData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceDataBaseData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceDataBaseData(FaceDataBaseData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceDataBaseData Clone() {
      return new FaceDataBaseData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::DDRCommProto.ePersonType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.ePersonType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 4;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceDataBaseData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceDataBaseData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceDataBaseData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            type_ = (global::DDRCommProto.ePersonType) input.ReadEnum();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdFaceDataBaseOrder : pb::IMessage<rspCmdFaceDataBaseOrder> {
    private static readonly pb::MessageParser<rspCmdFaceDataBaseOrder> _parser = new pb::MessageParser<rspCmdFaceDataBaseOrder>(() => new rspCmdFaceDataBaseOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdFaceDataBaseOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdFaceDataBaseOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdFaceDataBaseOrder(rspCmdFaceDataBaseOrder other) : this() {
      type_ = other.type_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdFaceDataBaseOrder Clone() {
      return new rspCmdFaceDataBaseOrder(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.FaceDataBaseData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::DDRCommProto.FaceDataBaseData.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.FaceDataBaseData> data_ = new pbc::RepeatedField<global::DDRCommProto.FaceDataBaseData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.FaceDataBaseData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdFaceDataBaseOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdFaceDataBaseOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdFaceDataBaseOrder other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the rspCmdFaceDataBaseOrder message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eRspDataBaseType {
        [pbr::OriginalName("eError")] EError = 0,
        [pbr::OriginalName("eQueryCount")] EQueryCount = 1,
        [pbr::OriginalName("eDeleteSuccess")] EDeleteSuccess = 2,
        [pbr::OriginalName("eDetailedData")] EDetailedData = 3,
      }

    }
    #endregion

  }

  public sealed partial class FaceServerConfig : pb::IMessage<FaceServerConfig> {
    private static readonly pb::MessageParser<FaceServerConfig> _parser = new pb::MessageParser<FaceServerConfig>(() => new FaceServerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceServerConfig(FaceServerConfig other) : this() {
      confidence_ = other.confidence_;
      faceQuality_ = other.faceQuality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceServerConfig Clone() {
      return new FaceServerConfig(this);
    }

    /// <summary>Field number for the "Confidence" field.</summary>
    public const int ConfidenceFieldNumber = 1;
    private float confidence_;
    /// <summary>
    /// Confidence (0 - 100)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "Face_quality" field.</summary>
    public const int FaceQualityFieldNumber = 2;
    private float faceQuality_;
    /// <summary>
    /// Face quality (0 - 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FaceQuality {
      get { return faceQuality_; }
      set {
        faceQuality_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FaceQuality, other.FaceQuality)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Confidence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      if (FaceQuality != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FaceQuality);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Confidence != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Confidence);
      }
      if (FaceQuality != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(FaceQuality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      if (FaceQuality != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
      if (other.FaceQuality != 0F) {
        FaceQuality = other.FaceQuality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Confidence = input.ReadFloat();
            break;
          }
          case 21: {
            FaceQuality = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get Face params
  /// </summary>
  public sealed partial class reqCmdGetFaceParams : pb::IMessage<reqCmdGetFaceParams> {
    private static readonly pb::MessageParser<reqCmdGetFaceParams> _parser = new pb::MessageParser<reqCmdGetFaceParams>(() => new reqCmdGetFaceParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdGetFaceParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetFaceParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetFaceParams(reqCmdGetFaceParams other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdGetFaceParams Clone() {
      return new reqCmdGetFaceParams(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdGetFaceParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdGetFaceParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdGetFaceParams other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdGetFaceParams : pb::IMessage<rspCmdGetFaceParams> {
    private static readonly pb::MessageParser<rspCmdGetFaceParams> _parser = new pb::MessageParser<rspCmdGetFaceParams>(() => new rspCmdGetFaceParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdGetFaceParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetFaceParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetFaceParams(rspCmdGetFaceParams other) : this() {
      faceConfig_ = other.faceConfig_ != null ? other.faceConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdGetFaceParams Clone() {
      return new rspCmdGetFaceParams(this);
    }

    /// <summary>Field number for the "Face_config" field.</summary>
    public const int FaceConfigFieldNumber = 1;
    private global::DDRCommProto.FaceServerConfig faceConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.FaceServerConfig FaceConfig {
      get { return faceConfig_; }
      set {
        faceConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdGetFaceParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdGetFaceParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FaceConfig, other.FaceConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (faceConfig_ != null) hash ^= FaceConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (faceConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FaceConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (faceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdGetFaceParams other) {
      if (other == null) {
        return;
      }
      if (other.faceConfig_ != null) {
        if (faceConfig_ == null) {
          faceConfig_ = new global::DDRCommProto.FaceServerConfig();
        }
        FaceConfig.MergeFrom(other.FaceConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (faceConfig_ == null) {
              faceConfig_ = new global::DDRCommProto.FaceServerConfig();
            }
            input.ReadMessage(faceConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set Face params
  /// </summary>
  public sealed partial class reqCmdSetFaceParams : pb::IMessage<reqCmdSetFaceParams> {
    private static readonly pb::MessageParser<reqCmdSetFaceParams> _parser = new pb::MessageParser<reqCmdSetFaceParams>(() => new reqCmdSetFaceParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmdSetFaceParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetFaceParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetFaceParams(reqCmdSetFaceParams other) : this() {
      faceConfig_ = other.faceConfig_ != null ? other.faceConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmdSetFaceParams Clone() {
      return new reqCmdSetFaceParams(this);
    }

    /// <summary>Field number for the "Face_config" field.</summary>
    public const int FaceConfigFieldNumber = 1;
    private global::DDRCommProto.FaceServerConfig faceConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.FaceServerConfig FaceConfig {
      get { return faceConfig_; }
      set {
        faceConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmdSetFaceParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmdSetFaceParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FaceConfig, other.FaceConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (faceConfig_ != null) hash ^= FaceConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (faceConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FaceConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (faceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmdSetFaceParams other) {
      if (other == null) {
        return;
      }
      if (other.faceConfig_ != null) {
        if (faceConfig_ == null) {
          faceConfig_ = new global::DDRCommProto.FaceServerConfig();
        }
        FaceConfig.MergeFrom(other.FaceConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (faceConfig_ == null) {
              faceConfig_ = new global::DDRCommProto.FaceServerConfig();
            }
            input.ReadMessage(faceConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class rspCmdSetFaceParams : pb::IMessage<rspCmdSetFaceParams> {
    private static readonly pb::MessageParser<rspCmdSetFaceParams> _parser = new pb::MessageParser<rspCmdSetFaceParams>(() => new rspCmdSetFaceParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rspCmdSetFaceParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetFaceParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetFaceParams(rspCmdSetFaceParams other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rspCmdSetFaceParams Clone() {
      return new rspCmdSetFaceParams(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.eCmdRspType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.eCmdRspType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rspCmdSetFaceParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rspCmdSetFaceParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rspCmdSetFaceParams other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.eCmdRspType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
