// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SimulationCmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DDRCommProto {

  /// <summary>Holder for reflection information generated from SimulationCmd.proto</summary>
  public static partial class SimulationCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for SimulationCmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimulationCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTaW11bGF0aW9uQ21kLnByb3RvEgxERFJDb21tUHJvdG8aDUJhc2VDbWQu",
            "cHJvdG8iPAoXbm90aWZ5RGlmZmVyZW50aWFsRHJpdmUSDwoHbGVmdFJQTRgB",
            "IAEoAhIQCghyaWdodFJQTRgCIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DDRCommProto.BaseCmdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyDifferentialDrive), global::DDRCommProto.notifyDifferentialDrive.Parser, new[]{ "LeftRPM", "RightRPM" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class notifyDifferentialDrive : pb::IMessage<notifyDifferentialDrive> {
    private static readonly pb::MessageParser<notifyDifferentialDrive> _parser = new pb::MessageParser<notifyDifferentialDrive>(() => new notifyDifferentialDrive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyDifferentialDrive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.SimulationCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyDifferentialDrive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyDifferentialDrive(notifyDifferentialDrive other) : this() {
      leftRPM_ = other.leftRPM_;
      rightRPM_ = other.rightRPM_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyDifferentialDrive Clone() {
      return new notifyDifferentialDrive(this);
    }

    /// <summary>Field number for the "leftRPM" field.</summary>
    public const int LeftRPMFieldNumber = 1;
    private float leftRPM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftRPM {
      get { return leftRPM_; }
      set {
        leftRPM_ = value;
      }
    }

    /// <summary>Field number for the "rightRPM" field.</summary>
    public const int RightRPMFieldNumber = 2;
    private float rightRPM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightRPM {
      get { return rightRPM_; }
      set {
        rightRPM_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyDifferentialDrive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyDifferentialDrive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftRPM, other.LeftRPM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightRPM, other.RightRPM)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftRPM != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftRPM);
      if (RightRPM != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightRPM);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftRPM != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(LeftRPM);
      }
      if (RightRPM != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RightRPM);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftRPM != 0F) {
        size += 1 + 4;
      }
      if (RightRPM != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyDifferentialDrive other) {
      if (other == null) {
        return;
      }
      if (other.LeftRPM != 0F) {
        LeftRPM = other.LeftRPM;
      }
      if (other.RightRPM != 0F) {
        RightRPM = other.RightRPM;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            LeftRPM = input.ReadFloat();
            break;
          }
          case 21: {
            RightRPM = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
